<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="837"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="837"> </text>
<g id="frames">
<g>
<title>all (5,115 samples, 100.00%)</title><rect x="10.0" y="803.0" width="1180.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="13.0" y="814.0">all</text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.12%)</title><rect x="10.2" y="787.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.2" y="798.0"></text>
</g>
<g>
<title>BarrierSet::static_write_ref_array_post(HeapWord*, unsigned long) (2 samples, 0.04%)</title><rect x="10.2" y="771.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.2" y="782.0"></text>
</g>
<g>
<title>BarrierSet::write_ref_array(HeapWord*, unsigned long) (3 samples, 0.06%)</title><rect x="10.7" y="771.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.7" y="782.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_ref_array_work(MemRegion) (2 samples, 0.04%)</title><rect x="10.9" y="755.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.9" y="766.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (2 samples, 0.04%)</title><rect x="10.9" y="739.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.9" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.run (4,986 samples, 97.48%)</title><rect x="11.6" y="787.0" width="1150.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.6" y="798.0">java/lang/Thread.run</text>
</g>
<g>
<title>clojure/lang/AFn.run (7 samples, 0.14%)</title><rect x="11.6" y="771.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.6" y="782.0"></text>
</g>
<g>
<title>clojure/core/async/impl/concurrent$counted_thread_factory$reify__736$fn__737.invoke (7 samples, 0.14%)</title><rect x="11.6" y="755.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (7 samples, 0.14%)</title><rect x="11.6" y="739.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="14.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (7 samples, 0.14%)</title><rect x="11.6" y="723.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.6" y="734.0"></text>
</g>
<g>
<title>clojure/lang/AFn.run (7 samples, 0.14%)</title><rect x="11.6" y="707.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.6" y="718.0"></text>
</g>
<g>
<title>clojure/core/async/impl/channels/ManyToManyChannel$fn__833$fn__834.invoke (7 samples, 0.14%)</title><rect x="11.6" y="691.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.6" y="702.0"></text>
</g>
<g>
<title>clojure/core/async$do_alts$fn__6163$fn__6166.invoke (7 samples, 0.14%)</title><rect x="11.6" y="675.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.6" y="686.0"></text>
</g>
<g>
<title>clojure/core/async$ioc_alts_BANG_$fn__6224.invoke (7 samples, 0.14%)</title><rect x="11.6" y="659.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.6" y="670.0"></text>
</g>
<g>
<title>clojure/core/async/impl/ioc_macros$run_state_machine_wrapped.invoke (7 samples, 0.14%)</title><rect x="11.6" y="643.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.6" y="654.0"></text>
</g>
<g>
<title>clojure/core/async/impl/ioc_macros$run_state_machine_wrapped.invokeStatic (7 samples, 0.14%)</title><rect x="11.6" y="627.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="14.6" y="638.0"></text>
</g>
<g>
<title>clojure/core/async/impl/ioc_macros$run_state_machine.invoke (7 samples, 0.14%)</title><rect x="11.6" y="611.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.6" y="622.0"></text>
</g>
<g>
<title>clojure/core/async/impl/ioc_macros$run_state_machine.invokeStatic (7 samples, 0.14%)</title><rect x="11.6" y="595.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.6" y="606.0"></text>
</g>
<g>
<title>hammer/core$_main$fn__8968$state_machine__5995__auto____9007.invoke (7 samples, 0.14%)</title><rect x="11.6" y="579.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.6" y="590.0"></text>
</g>
<g>
<title>hammer/core$_main$fn__8968$state_machine__5995__auto____9007$fn__9009.invoke (7 samples, 0.14%)</title><rect x="11.6" y="563.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.6" y="574.0"></text>
</g>
<g>
<title>clojure/lang/Numbers.double_array (5 samples, 0.10%)</title><rect x="11.6" y="547.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.6" y="558.0"></text>
</g>
<g>
<title>clojure/lang/RT.count (5 samples, 0.10%)</title><rect x="11.6" y="531.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="14.6" y="542.0"></text>
</g>
<g>
<title>clojure/lang/RT.countFrom (5 samples, 0.10%)</title><rect x="11.6" y="515.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="14.6" y="526.0"></text>
</g>
<g>
<title>clojure/lang/Cons.next (4 samples, 0.08%)</title><rect x="11.8" y="499.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="14.8" y="510.0"></text>
</g>
<g>
<title>clojure/lang/LazySeq.seq (4 samples, 0.08%)</title><rect x="11.8" y="483.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.8" y="494.0"></text>
</g>
<g>
<title>clojure/lang/LazySeq.sval (4 samples, 0.08%)</title><rect x="11.8" y="467.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="14.8" y="478.0"></text>
</g>
<g>
<title>clojure/core$concat$cat__5495$fn__5496.invoke (4 samples, 0.08%)</title><rect x="11.8" y="451.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="14.8" y="462.0"></text>
</g>
<g>
<title>clojure/core$concat$cat__5495.invoke (3 samples, 0.06%)</title><rect x="11.8" y="435.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="14.8" y="446.0"></text>
</g>
<g>
<title>clojure/lang/LazySeq.&lt;init&gt; (2 samples, 0.04%)</title><rect x="12.1" y="419.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.1" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.sort (2 samples, 0.04%)</title><rect x="12.8" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="15.8" y="558.0"></text>
</g>
<g>
<title>java/util/DualPivotQuicksort.sort (2 samples, 0.04%)</title><rect x="12.8" y="531.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.8" y="542.0"></text>
</g>
<g>
<title>java/util/DualPivotQuicksort.doSort (2 samples, 0.04%)</title><rect x="12.8" y="515.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.8" y="526.0"></text>
</g>
<g>
<title>java/util/DualPivotQuicksort.sort (2 samples, 0.04%)</title><rect x="12.8" y="499.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.8" y="510.0"></text>
</g>
<g>
<title>java/util/DualPivotQuicksort.sort (2 samples, 0.04%)</title><rect x="12.8" y="483.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.8" y="494.0"></text>
</g>
<g>
<title>java/util/DualPivotQuicksort.sort (2 samples, 0.04%)</title><rect x="12.8" y="467.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.8" y="478.0"></text>
</g>
<g>
<title>java/util/DualPivotQuicksort.sort (2 samples, 0.04%)</title><rect x="12.8" y="451.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.8" y="462.0"></text>
</g>
<g>
<title>java/util/DualPivotQuicksort.sort (2 samples, 0.04%)</title><rect x="12.8" y="435.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.8" y="446.0"></text>
</g>
<g>
<title>java/util/DualPivotQuicksort.sort (2 samples, 0.04%)</title><rect x="12.8" y="419.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.8" y="430.0"></text>
</g>
<g>
<title>java/util/DualPivotQuicksort.sort (2 samples, 0.04%)</title><rect x="12.8" y="403.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.8" y="414.0"></text>
</g>
<g>
<title>java/util/DualPivotQuicksort.sort (2 samples, 0.04%)</title><rect x="12.8" y="387.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.8" y="398.0"></text>
</g>
<g>
<title>java/util/DualPivotQuicksort.sort (2 samples, 0.04%)</title><rect x="12.8" y="371.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.8" y="382.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocalRunnable.run (1,062 samples, 20.76%)</title><rect x="13.2" y="771.0" width="245.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.2" y="782.0">io/netty/util/concurrent/FastThr..</text>
</g>
<g>
<title>io/netty/util/HashedWheelTimer$Worker.run (10 samples, 0.20%)</title><rect x="13.2" y="755.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="16.2" y="766.0"></text>
</g>
<g>
<title>io/netty/util/HashedWheelTimer$Worker.processCancelledTasks (9 samples, 0.18%)</title><rect x="13.2" y="739.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.2" y="750.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscUnboundedArrayQueue.poll (9 samples, 0.18%)</title><rect x="13.2" y="723.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.2" y="734.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/BaseMpscLinkedArrayQueue.poll (9 samples, 0.18%)</title><rect x="13.2" y="707.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.2" y="718.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/BaseMpscLinkedArrayQueueConsumerFields.soConsumerIndex (8 samples, 0.16%)</title><rect x="13.5" y="691.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.5" y="702.0"></text>
</g>
<g>
<title>io/netty/util/internal/ThreadExecutorMap$2.run (1,052 samples, 20.57%)</title><rect x="15.5" y="755.0" width="242.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.5" y="766.0">io/netty/util/internal/ThreadExe..</text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor$4.run (1,052 samples, 20.57%)</title><rect x="15.5" y="739.0" width="242.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.5" y="750.0">io/netty/util/concurrent/SingleT..</text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.run (1,052 samples, 20.57%)</title><rect x="15.5" y="723.0" width="242.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.5" y="734.0">io/netty/channel/nio/NioEventLoo..</text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKeys (330 samples, 6.45%)</title><rect x="17.8" y="707.0" width="76.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="20.8" y="718.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKeysOptimized (329 samples, 6.43%)</title><rect x="18.1" y="691.0" width="75.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.1" y="702.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKey (327 samples, 6.39%)</title><rect x="18.5" y="675.0" width="75.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="21.5" y="686.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe.read (326 samples, 6.37%)</title><rect x="18.8" y="659.0" width="75.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="21.8" y="670.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.fireChannelRead (210 samples, 4.11%)</title><rect x="19.5" y="643.0" width="48.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.5" y="654.0">io/n..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (210 samples, 4.11%)</title><rect x="19.5" y="627.0" width="48.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.5" y="638.0">io/n..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (210 samples, 4.11%)</title><rect x="19.5" y="611.0" width="48.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.5" y="622.0">io/n..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.channelRead (210 samples, 4.11%)</title><rect x="19.5" y="595.0" width="48.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="22.5" y="606.0">io/n..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (210 samples, 4.11%)</title><rect x="19.5" y="579.0" width="48.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.5" y="590.0">io/n..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (209 samples, 4.09%)</title><rect x="19.7" y="563.0" width="48.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.7" y="574.0">io/n..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.executor (4 samples, 0.08%)</title><rect x="19.7" y="547.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.7" y="558.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.channel (4 samples, 0.08%)</title><rect x="19.7" y="531.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="22.7" y="542.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.08%)</title><rect x="19.7" y="515.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="22.7" y="526.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (205 samples, 4.01%)</title><rect x="20.6" y="547.0" width="47.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.6" y="558.0">io/n..</text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.channelRead (204 samples, 3.99%)</title><rect x="20.8" y="531.0" width="47.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.8" y="542.0">io/n..</text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (11 samples, 0.22%)</title><rect x="21.1" y="515.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.1" y="526.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (11 samples, 0.22%)</title><rect x="21.1" y="499.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.1" y="510.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf.deallocate (4 samples, 0.08%)</title><rect x="21.1" y="483.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.1" y="494.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf$Component.free (4 samples, 0.08%)</title><rect x="21.1" y="467.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.1" y="478.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (4 samples, 0.08%)</title><rect x="21.1" y="451.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.1" y="462.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (3 samples, 0.06%)</title><rect x="21.1" y="435.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.1" y="446.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.deallocate (3 samples, 0.06%)</title><rect x="21.1" y="419.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.1" y="430.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.free (3 samples, 0.06%)</title><rect x="21.1" y="403.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.1" y="414.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.freeChunk (2 samples, 0.04%)</title><rect x="21.3" y="387.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.3" y="398.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.deallocate (7 samples, 0.14%)</title><rect x="22.0" y="483.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.0" y="494.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.free (7 samples, 0.14%)</title><rect x="22.0" y="467.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.0" y="478.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.freeChunk (5 samples, 0.10%)</title><rect x="22.0" y="451.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.0" y="462.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunkList.free (5 samples, 0.10%)</title><rect x="22.0" y="435.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="25.0" y="446.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.free (5 samples, 0.10%)</title><rect x="22.0" y="419.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.0" y="430.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.add (2 samples, 0.04%)</title><rect x="23.1" y="451.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.1" y="462.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.add (2 samples, 0.04%)</title><rect x="23.1" y="435.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.1" y="446.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.newEntry (2 samples, 0.04%)</title><rect x="23.1" y="419.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="26.1" y="430.0"></text>
</g>
<g>
<title>io/netty/util/internal/ObjectPool$RecyclerObjectPool.get (2 samples, 0.04%)</title><rect x="23.1" y="403.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="26.1" y="414.0"></text>
</g>
<g>
<title>io/netty/util/Recycler.get (2 samples, 0.04%)</title><rect x="23.1" y="387.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.1" y="398.0"></text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.callDecode (109 samples, 2.13%)</title><rect x="24.1" y="515.0" width="25.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.1" y="526.0">i..</text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf$1.unsafeOffset (2 samples, 0.04%)</title><rect x="25.5" y="499.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="28.5" y="510.0"></text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.decodeRemovalReentryProtection (99 samples, 1.94%)</title><rect x="25.9" y="499.0" width="22.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.9" y="510.0">i..</text>
</g>
<g>
<title>io/netty/handler/codec/LengthFieldBasedFrameDecoder.decode (99 samples, 1.94%)</title><rect x="25.9" y="483.0" width="22.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.9" y="494.0">i..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/FrameDecoder.decode (99 samples, 1.94%)</title><rect x="25.9" y="467.0" width="22.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.9" y="478.0">c..</text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/FrameCodec.decode (83 samples, 1.62%)</title><rect x="26.4" y="451.0" width="19.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.4" y="462.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufCompressor.decompress (53 samples, 1.04%)</title><rect x="26.4" y="435.0" width="12.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="29.4" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufCompressor.decompress (53 samples, 1.04%)</title><rect x="26.4" y="419.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.4" y="430.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufCompressor.decompressWithoutLength (52 samples, 1.02%)</title><rect x="26.4" y="403.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.4" y="414.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/Lz4Compressor.decompressDirect (52 samples, 1.02%)</title><rect x="26.4" y="387.0" width="12.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.4" y="398.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufCompressor.inputNioBuffer (8 samples, 0.16%)</title><rect x="26.4" y="371.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.4" y="382.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.readerIndex (4 samples, 0.08%)</title><rect x="26.6" y="355.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="29.6" y="366.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.04%)</title><rect x="27.8" y="355.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="30.8" y="366.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (20 samples, 0.39%)</title><rect x="28.2" y="371.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.2" y="382.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (20 samples, 0.39%)</title><rect x="28.2" y="355.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.2" y="366.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.newDirectBuffer (20 samples, 0.39%)</title><rect x="28.2" y="339.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.2" y="350.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.toLeakAwareBuffer (4 samples, 0.08%)</title><rect x="28.2" y="323.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.2" y="334.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track (4 samples, 0.08%)</title><rect x="28.2" y="307.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.2" y="318.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track0 (4 samples, 0.08%)</title><rect x="28.2" y="291.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="31.2" y="302.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.&lt;init&gt; (3 samples, 0.06%)</title><rect x="28.5" y="275.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.5" y="286.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$Record.&lt;init&gt; (3 samples, 0.06%)</title><rect x="28.5" y="259.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.5" y="270.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (3 samples, 0.06%)</title><rect x="28.5" y="243.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.5" y="254.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (3 samples, 0.06%)</title><rect x="28.5" y="227.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="31.5" y="238.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (3 samples, 0.06%)</title><rect x="28.5" y="211.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.5" y="222.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (3 samples, 0.06%)</title><rect x="28.5" y="195.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="31.5" y="206.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (3 samples, 0.06%)</title><rect x="28.5" y="179.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="31.5" y="190.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (3 samples, 0.06%)</title><rect x="28.5" y="163.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="31.5" y="174.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (3 samples, 0.06%)</title><rect x="28.5" y="147.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="31.5" y="158.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (16 samples, 0.31%)</title><rect x="29.1" y="323.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.1" y="334.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (15 samples, 0.29%)</title><rect x="29.4" y="307.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.4" y="318.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocateTiny (15 samples, 0.29%)</title><rect x="29.4" y="291.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="32.4" y="302.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocate (10 samples, 0.20%)</title><rect x="29.6" y="275.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.6" y="286.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.allocate (9 samples, 0.18%)</title><rect x="29.8" y="259.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.8" y="270.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscArrayQueue.poll (5 samples, 0.10%)</title><rect x="30.8" y="243.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="33.8" y="254.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/util/UnsafeRefArrayAccess.soRefElement (4 samples, 0.08%)</title><rect x="31.0" y="227.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.0" y="238.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cacheForTiny (4 samples, 0.08%)</title><rect x="31.9" y="275.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.9" y="286.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cache (2 samples, 0.04%)</title><rect x="32.4" y="259.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="35.4" y="270.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4JNIFastDecompressor.decompress (24 samples, 0.47%)</title><rect x="32.8" y="371.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="35.8" y="382.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4JNI.LZ4_decompress_fast (24 samples, 0.47%)</title><rect x="32.8" y="355.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.8" y="366.0"></text>
</g>
<g>
<title>Java_net_jpountz_lz4_LZ4JNI_LZ4_1decompress_1fast (17 samples, 0.33%)</title><rect x="32.8" y="339.0" width="4.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="35.8" y="350.0"></text>
</g>
<g>
<title>jni_GetDirectBufferAddress (11 samples, 0.22%)</title><rect x="33.8" y="323.0" width="2.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="36.8" y="334.0"></text>
</g>
<g>
<title>java_lang_Class::as_Klass(oopDesc*) (2 samples, 0.04%)</title><rect x="34.7" y="307.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="37.7" y="318.0"></text>
</g>
<g>
<title>jni_IsInstanceOf (5 samples, 0.10%)</title><rect x="35.1" y="307.0" width="1.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="38.1" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.237] (2 samples, 0.04%)</title><rect x="35.8" y="291.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="38.8" y="302.0"></text>
</g>
<g>
<title>jni_IsInstanceOf (2 samples, 0.04%)</title><rect x="36.3" y="323.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="39.3" y="334.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.12%)</title><rect x="37.0" y="339.0" width="1.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="40.0" y="350.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (5 samples, 0.10%)</title><rect x="37.2" y="323.0" width="1.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="40.2" y="334.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.readByte (17 samples, 0.33%)</title><rect x="38.6" y="435.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.6" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.readByte (17 samples, 0.33%)</title><rect x="38.6" y="419.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.6" y="430.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.readByte (11 samples, 0.22%)</title><rect x="38.6" y="403.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.6" y="414.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.checkReadableBytes0 (8 samples, 0.16%)</title><rect x="38.6" y="387.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="41.6" y="398.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureAccessible (8 samples, 0.16%)</title><rect x="38.6" y="371.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.6" y="382.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractDerivedByteBuf.isAccessible (7 samples, 0.14%)</title><rect x="38.8" y="355.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="41.8" y="366.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.isAccessible (4 samples, 0.08%)</title><rect x="38.8" y="339.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.8" y="350.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.isLiveNonVolatile (3 samples, 0.06%)</title><rect x="39.1" y="323.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.1" y="334.0"></text>
</g>
<g>
<title>io/netty/buffer/UnpooledSlicedByteBuf.unwrap (3 samples, 0.06%)</title><rect x="39.8" y="339.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.8" y="350.0"></text>
</g>
<g>
<title>io/netty/buffer/UnpooledSlicedByteBuf.unwrap (3 samples, 0.06%)</title><rect x="39.8" y="323.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.8" y="334.0"></text>
</g>
<g>
<title>io/netty/buffer/UnpooledSlicedByteBuf._getByte (3 samples, 0.06%)</title><rect x="40.5" y="387.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="43.5" y="398.0"></text>
</g>
<g>
<title>io/netty/buffer/UnpooledSlicedByteBuf.unwrap (2 samples, 0.04%)</title><rect x="40.7" y="371.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="43.7" y="382.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.readUnsignedShort (5 samples, 0.10%)</title><rect x="41.4" y="403.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.4" y="414.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.readInt (5 samples, 0.10%)</title><rect x="42.5" y="435.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="45.5" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.readInt (5 samples, 0.10%)</title><rect x="42.5" y="419.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="45.5" y="430.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.readInt (5 samples, 0.10%)</title><rect x="42.5" y="403.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.5" y="414.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.checkReadableBytes0 (5 samples, 0.10%)</title><rect x="42.5" y="387.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.5" y="398.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureAccessible (5 samples, 0.10%)</title><rect x="42.5" y="371.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="45.5" y="382.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractDerivedByteBuf.isAccessible (3 samples, 0.06%)</title><rect x="42.8" y="355.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.8" y="366.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.release (6 samples, 0.12%)</title><rect x="43.7" y="435.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.7" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.release (6 samples, 0.12%)</title><rect x="43.7" y="419.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="46.7" y="430.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (6 samples, 0.12%)</title><rect x="43.7" y="403.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="46.7" y="414.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (6 samples, 0.12%)</title><rect x="43.7" y="387.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="46.7" y="398.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf.deallocate (4 samples, 0.08%)</title><rect x="43.7" y="371.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="46.7" y="382.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf$Component.free (4 samples, 0.08%)</title><rect x="43.7" y="355.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="46.7" y="366.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (4 samples, 0.08%)</title><rect x="43.7" y="339.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="46.7" y="350.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (3 samples, 0.06%)</title><rect x="43.7" y="323.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.7" y="334.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.deallocate (3 samples, 0.06%)</title><rect x="43.7" y="307.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="46.7" y="318.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.free (3 samples, 0.06%)</title><rect x="43.7" y="291.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.7" y="302.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.add (2 samples, 0.04%)</title><rect x="43.9" y="275.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.9" y="286.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cache (2 samples, 0.04%)</title><rect x="43.9" y="259.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.9" y="270.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cacheForNormal (2 samples, 0.04%)</title><rect x="43.9" y="243.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.9" y="254.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.deallocate (2 samples, 0.04%)</title><rect x="44.6" y="371.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="47.6" y="382.0"></text>
</g>
<g>
<title>io/netty/handler/codec/LengthFieldBasedFrameDecoder.decode (14 samples, 0.27%)</title><rect x="45.5" y="451.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.5" y="462.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/FrameDecoder.extractFrame (8 samples, 0.16%)</title><rect x="46.7" y="435.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="49.7" y="446.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.slice (5 samples, 0.10%)</title><rect x="46.9" y="419.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.9" y="430.0"></text>
</g>
<g>
<title>io/netty/buffer/UnpooledSlicedByteBuf.&lt;init&gt; (4 samples, 0.08%)</title><rect x="47.1" y="403.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="50.1" y="414.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractUnpooledSlicedByteBuf.&lt;init&gt; (4 samples, 0.08%)</title><rect x="47.1" y="387.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="50.1" y="398.0"></text>
</g>
<g>
<title>io/netty/util/internal/MathUtil.isOutOfBounds (2 samples, 0.04%)</title><rect x="48.1" y="419.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="51.1" y="430.0"></text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.fireChannelRead (80 samples, 1.56%)</title><rect x="49.2" y="515.0" width="18.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="52.2" y="526.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (80 samples, 1.56%)</title><rect x="49.2" y="499.0" width="18.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="52.2" y="510.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (80 samples, 1.56%)</title><rect x="49.2" y="483.0" width="18.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="52.2" y="494.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (80 samples, 1.56%)</title><rect x="49.2" y="467.0" width="18.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="52.2" y="478.0"></text>
</g>
<g>
<title>io/netty/handler/timeout/IdleStateHandler.channelRead (80 samples, 1.56%)</title><rect x="49.2" y="451.0" width="18.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="52.2" y="462.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (80 samples, 1.56%)</title><rect x="49.2" y="435.0" width="18.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="52.2" y="446.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (80 samples, 1.56%)</title><rect x="49.2" y="419.0" width="18.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="52.2" y="430.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (79 samples, 1.54%)</title><rect x="49.2" y="403.0" width="18.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="52.2" y="414.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/InFlightHandler.channelRead (78 samples, 1.52%)</title><rect x="49.4" y="387.0" width="18.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.4" y="398.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/InFlightHandler.release (2 samples, 0.04%)</title><rect x="50.6" y="371.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="53.6" y="382.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler$NodeResponseCallback.onResponse (66 samples, 1.29%)</title><rect x="51.3" y="371.0" width="15.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="54.3" y="382.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler.access$1700 (57 samples, 1.11%)</title><rect x="52.0" y="355.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.0" y="366.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler.setFinalResult (57 samples, 1.11%)</title><rect x="52.0" y="339.0" width="13.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.0" y="350.0"></text>
</g>
<g>
<title>com/datastax/dse/driver/internal/core/tracker/MultiplexingRequestTracker.onNodeSuccess (4 samples, 0.08%)</title><rect x="52.0" y="323.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.0" y="334.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/loadbalancing/DefaultLoadBalancingPolicy.onNodeSuccess (4 samples, 0.08%)</title><rect x="52.0" y="307.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.0" y="318.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/loadbalancing/DefaultLoadBalancingPolicy.updateResponseTimes (4 samples, 0.08%)</title><rect x="52.0" y="291.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.compute (4 samples, 0.08%)</title><rect x="52.0" y="275.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (3 samples, 0.06%)</title><rect x="52.2" y="259.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.2" y="270.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/Conversions.toResultSet (4 samples, 0.08%)</title><rect x="52.9" y="323.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.9" y="334.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSet.empty (4 samples, 0.08%)</title><rect x="52.9" y="307.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.9" y="318.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/DefaultAsyncResultSet$2.&lt;init&gt; (2 samples, 0.04%)</title><rect x="53.4" y="291.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.4" y="302.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler.buildExecutionInfo (4 samples, 0.08%)</title><rect x="53.8" y="323.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="56.8" y="334.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/DefaultExecutionInfo.&lt;init&gt; (3 samples, 0.06%)</title><rect x="54.1" y="307.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="57.1" y="318.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler.cancelScheduledTasks (10 samples, 0.20%)</title><rect x="54.8" y="323.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="57.8" y="334.0"></text>
</g>
<g>
<title>io/netty/util/HashedWheelTimer$HashedWheelTimeout.cancel (7 samples, 0.14%)</title><rect x="55.4" y="307.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="58.4" y="318.0"></text>
</g>
<g>
<title>io/netty/util/HashedWheelTimer$HashedWheelTimeout.compareAndSetState (3 samples, 0.06%)</title><rect x="55.7" y="291.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet (3 samples, 0.06%)</title><rect x="55.7" y="275.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.7" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.add (3 samples, 0.06%)</title><rect x="56.4" y="291.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="59.4" y="302.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscUnboundedArrayQueue.offer (3 samples, 0.06%)</title><rect x="56.4" y="275.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.4" y="286.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/BaseMpscLinkedArrayQueue.offer (3 samples, 0.06%)</title><rect x="56.4" y="259.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="59.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (34 samples, 0.66%)</title><rect x="57.1" y="323.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (34 samples, 0.66%)</title><rect x="57.1" y="307.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="60.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Signaller.tryFire (28 samples, 0.55%)</title><rect x="57.8" y="291.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 0.45%)</title><rect x="58.9" y="275.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="61.9" y="286.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (23 samples, 0.45%)</title><rect x="58.9" y="259.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="61.9" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark (20 samples, 0.39%)</title><rect x="59.4" y="243.0" width="4.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="62.4" y="254.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="59.8" y="227.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="62.8" y="238.0"></text>
</g>
<g>
<title>__pthread_cond_signal (10 samples, 0.20%)</title><rect x="60.5" y="227.0" width="2.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="63.5" y="238.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (3 samples, 0.06%)</title><rect x="62.8" y="227.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="65.8" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.04%)</title><rect x="63.5" y="227.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="66.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniExceptionally.tryFire (3 samples, 0.06%)</title><rect x="64.2" y="291.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.2" y="302.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler.access$700 (4 samples, 0.08%)</title><rect x="65.1" y="355.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.1" y="366.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler.setFinalResult (2 samples, 0.04%)</title><rect x="65.4" y="339.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="68.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.remove (2 samples, 0.04%)</title><rect x="66.1" y="355.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="69.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.remove (2 samples, 0.04%)</title><rect x="66.1" y="339.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.1" y="350.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/HashBiMap.get (4 samples, 0.08%)</title><rect x="66.5" y="371.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="69.5" y="382.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/HashBiMap.seekByKey (4 samples, 0.08%)</title><rect x="66.5" y="355.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.5" y="366.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.fireChannelReadComplete (16 samples, 0.31%)</title><rect x="67.9" y="643.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.9" y="654.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (16 samples, 0.31%)</title><rect x="67.9" y="627.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="70.9" y="638.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (16 samples, 0.31%)</title><rect x="67.9" y="611.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.9" y="622.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.channelReadComplete (16 samples, 0.31%)</title><rect x="67.9" y="595.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="70.9" y="606.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelReadComplete (10 samples, 0.20%)</title><rect x="67.9" y="579.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.9" y="590.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (9 samples, 0.18%)</title><rect x="68.1" y="563.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.1" y="574.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (9 samples, 0.18%)</title><rect x="68.1" y="547.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="71.1" y="558.0"></text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.channelReadComplete (8 samples, 0.16%)</title><rect x="68.4" y="531.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="71.4" y="542.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelReadComplete (8 samples, 0.16%)</title><rect x="68.4" y="515.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.4" y="526.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (8 samples, 0.16%)</title><rect x="68.4" y="499.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.4" y="510.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (8 samples, 0.16%)</title><rect x="68.4" y="483.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.4" y="494.0"></text>
</g>
<g>
<title>io/netty/handler/timeout/IdleStateHandler.channelReadComplete (6 samples, 0.12%)</title><rect x="68.6" y="467.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.6" y="478.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelReadComplete (4 samples, 0.08%)</title><rect x="69.1" y="451.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="72.1" y="462.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (4 samples, 0.08%)</title><rect x="69.1" y="435.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="72.1" y="446.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (4 samples, 0.08%)</title><rect x="69.1" y="419.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="72.1" y="430.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$TailContext.handler (2 samples, 0.04%)</title><rect x="69.5" y="403.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="72.5" y="414.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.readIfIsAutoRead (6 samples, 0.12%)</title><rect x="70.2" y="579.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.2" y="590.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.read (2 samples, 0.04%)</title><rect x="70.2" y="563.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.2" y="574.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.read (2 samples, 0.04%)</title><rect x="70.2" y="547.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="73.2" y="558.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.read (2 samples, 0.04%)</title><rect x="70.2" y="531.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.2" y="542.0"></text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.channelReadComplete (4 samples, 0.08%)</title><rect x="70.7" y="563.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="73.7" y="574.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultMaxMessagesRecvByteBufAllocator$MaxMessageHandle.allocate (39 samples, 0.76%)</title><rect x="71.6" y="643.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="74.6" y="654.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.ioBuffer (38 samples, 0.74%)</title><rect x="71.6" y="627.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.6" y="638.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (36 samples, 0.70%)</title><rect x="72.1" y="611.0" width="8.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="75.1" y="622.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (36 samples, 0.70%)</title><rect x="72.1" y="595.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="75.1" y="606.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.newDirectBuffer (36 samples, 0.70%)</title><rect x="72.1" y="579.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="75.1" y="590.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.toLeakAwareBuffer (5 samples, 0.10%)</title><rect x="72.3" y="563.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.3" y="574.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track (5 samples, 0.10%)</title><rect x="72.3" y="547.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="75.3" y="558.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track0 (5 samples, 0.10%)</title><rect x="72.3" y="531.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.3" y="542.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.&lt;init&gt; (2 samples, 0.04%)</title><rect x="72.3" y="515.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="75.3" y="526.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$Record.&lt;init&gt; (2 samples, 0.04%)</title><rect x="72.3" y="499.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.3" y="510.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (2 samples, 0.04%)</title><rect x="72.3" y="483.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="75.3" y="494.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (2 samples, 0.04%)</title><rect x="72.3" y="467.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="75.3" y="478.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (2 samples, 0.04%)</title><rect x="72.3" y="451.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.3" y="462.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (2 samples, 0.04%)</title><rect x="72.3" y="435.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="75.3" y="446.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (2 samples, 0.04%)</title><rect x="72.3" y="419.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="75.3" y="430.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (2 samples, 0.04%)</title><rect x="72.3" y="403.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="75.3" y="414.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (2 samples, 0.04%)</title><rect x="72.3" y="387.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="75.3" y="398.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.threadLocalRandom (3 samples, 0.06%)</title><rect x="72.7" y="515.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="75.7" y="526.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent$2.current (3 samples, 0.06%)</title><rect x="72.7" y="499.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="75.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.current (3 samples, 0.06%)</title><rect x="72.7" y="483.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.7" y="494.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (30 samples, 0.59%)</title><rect x="73.4" y="563.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.4" y="574.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena$DirectArena.newByteBuf (13 samples, 0.25%)</title><rect x="73.4" y="547.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.4" y="558.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.newInstance (9 samples, 0.18%)</title><rect x="73.7" y="531.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.7" y="542.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.reuse (5 samples, 0.10%)</title><rect x="73.7" y="515.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="76.7" y="526.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.setIndex0 (2 samples, 0.04%)</title><rect x="73.9" y="499.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="76.9" y="510.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.resetRefCnt (2 samples, 0.04%)</title><rect x="74.4" y="499.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.4" y="510.0"></text>
</g>
<g>
<title>io/netty/util/internal/ObjectPool$RecyclerObjectPool.get (4 samples, 0.08%)</title><rect x="74.8" y="515.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="77.8" y="526.0"></text>
</g>
<g>
<title>io/netty/util/Recycler.get (4 samples, 0.08%)</title><rect x="74.8" y="499.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="77.8" y="510.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.pop (4 samples, 0.08%)</title><rect x="74.8" y="483.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="77.8" y="494.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.channelRead (3 samples, 0.06%)</title><rect x="75.7" y="531.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.7" y="542.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (17 samples, 0.33%)</title><rect x="76.4" y="547.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.4" y="558.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocateNormal (10 samples, 0.20%)</title><rect x="76.7" y="531.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.7" y="542.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunkList.allocate (9 samples, 0.18%)</title><rect x="76.9" y="515.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="79.9" y="526.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.allocate (8 samples, 0.16%)</title><rect x="77.1" y="499.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.1" y="510.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.allocateRun (6 samples, 0.12%)</title><rect x="77.4" y="483.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="80.4" y="494.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.allocateNode (6 samples, 0.12%)</title><rect x="77.4" y="467.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.4" y="478.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBufWithSubpage (3 samples, 0.06%)</title><rect x="79.2" y="531.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="82.2" y="542.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBufWithSubpage (3 samples, 0.06%)</title><rect x="79.2" y="515.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.2" y="526.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.handler (3 samples, 0.06%)</title><rect x="79.2" y="499.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="82.2" y="510.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocateNormal (2 samples, 0.04%)</title><rect x="79.9" y="531.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.9" y="542.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cacheForNormal (2 samples, 0.04%)</title><rect x="79.9" y="515.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="82.9" y="526.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultMaxMessagesRecvByteBufAllocator$MaxMessageHandle.reset (17 samples, 0.33%)</title><rect x="80.6" y="643.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="83.6" y="654.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.toLeakAwareBuffer (3 samples, 0.06%)</title><rect x="82.0" y="627.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="85.0" y="638.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.touch (3 samples, 0.06%)</title><rect x="82.7" y="627.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.7" y="638.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena$DirectArena.isDirect (2 samples, 0.04%)</title><rect x="83.4" y="627.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.4" y="638.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.04%)</title><rect x="84.1" y="627.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="87.1" y="638.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel.shouldBreakReadReady (5 samples, 0.10%)</title><rect x="84.5" y="643.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.5" y="654.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.isInputShutdown0 (5 samples, 0.10%)</title><rect x="84.5" y="627.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="87.5" y="638.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.isInputShutdown (5 samples, 0.10%)</title><rect x="84.5" y="611.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="87.5" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.isInputShutdown (3 samples, 0.06%)</title><rect x="84.5" y="595.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.5" y="606.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.get (2 samples, 0.04%)</title><rect x="84.5" y="579.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.socket (2 samples, 0.04%)</title><rect x="85.2" y="595.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="88.2" y="606.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.doReadBytes (36 samples, 0.70%)</title><rect x="85.7" y="643.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="88.7" y="654.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writableBytes (2 samples, 0.04%)</title><rect x="85.7" y="627.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="88.7" y="638.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (32 samples, 0.63%)</title><rect x="86.1" y="627.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.1" y="638.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.setBytes (32 samples, 0.63%)</title><rect x="86.1" y="611.0" width="7.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="89.1" y="622.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.internalNioBuffer (2 samples, 0.04%)</title><rect x="86.1" y="595.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.1" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (30 samples, 0.59%)</title><rect x="86.6" y="595.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.6" y="606.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.06%)</title><rect x="86.8" y="579.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="89.8" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.06%)</title><rect x="86.8" y="563.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.8" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (20 samples, 0.39%)</title><rect x="87.5" y="579.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (20 samples, 0.39%)</title><rect x="87.5" y="563.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="90.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (18 samples, 0.35%)</title><rect x="88.0" y="547.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="91.0" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (18 samples, 0.35%)</title><rect x="88.0" y="531.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="91.0" y="542.0"></text>
</g>
<g>
<title>/usr/lib64/libpthread-2.17.so (9 samples, 0.18%)</title><rect x="88.4" y="515.0" width="2.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="91.4" y="526.0"></text>
</g>
<g>
<title>__libc_read (5 samples, 0.10%)</title><rect x="90.5" y="515.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="93.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (3 samples, 0.06%)</title><rect x="92.1" y="579.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="95.1" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureReadOpen (3 samples, 0.06%)</title><rect x="92.8" y="579.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.8" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.isConnected (2 samples, 0.04%)</title><rect x="93.0" y="563.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.0" y="574.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.select (89 samples, 1.74%)</title><rect x="94.0" y="707.0" width="20.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="97.0" y="718.0"></text>
</g>
<g>
<title>io/netty/channel/nio/SelectedSelectionKeySetSelector.select (85 samples, 1.66%)</title><rect x="94.4" y="691.0" width="19.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.4" y="702.0"></text>
</g>
<g>
<title>io/netty/channel/nio/SelectedSelectionKeySet.reset (6 samples, 0.12%)</title><rect x="94.7" y="675.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="97.7" y="686.0"></text>
</g>
<g>
<title>io/netty/channel/nio/SelectedSelectionKeySet.reset (6 samples, 0.12%)</title><rect x="94.7" y="659.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="97.7" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.fill (6 samples, 0.12%)</title><rect x="94.7" y="643.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.7" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.rangeCheck (3 samples, 0.06%)</title><rect x="95.4" y="627.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.4" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (78 samples, 1.52%)</title><rect x="96.0" y="675.0" width="18.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.0" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (78 samples, 1.52%)</title><rect x="96.0" y="659.0" width="18.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="99.0" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (73 samples, 1.43%)</title><rect x="97.2" y="643.0" width="16.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="100.2" y="654.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (4 samples, 0.08%)</title><rect x="98.8" y="627.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.8" y="638.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.06%)</title><rect x="98.8" y="611.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="101.8" y="622.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.06%)</title><rect x="98.8" y="595.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="101.8" y="606.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.06%)</title><rect x="98.8" y="579.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="101.8" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (6 samples, 0.12%)</title><rect x="99.7" y="627.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.7" y="638.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.12%)</title><rect x="99.7" y="611.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="102.7" y="622.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (6 samples, 0.12%)</title><rect x="99.7" y="595.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.7" y="606.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (6 samples, 0.12%)</title><rect x="99.7" y="579.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (45 samples, 0.88%)</title><rect x="101.1" y="627.0" width="10.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="104.1" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (42 samples, 0.82%)</title><rect x="101.6" y="611.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="104.6" y="622.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.04%)</title><rect x="104.4" y="595.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="107.4" y="606.0"></text>
</g>
<g>
<title>epoll_wait (25 samples, 0.49%)</title><rect x="104.8" y="595.0" width="5.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="107.8" y="606.0"></text>
</g>
<g>
<title>epoll_wait@plt (3 samples, 0.06%)</title><rect x="110.6" y="595.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="113.6" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (5 samples, 0.10%)</title><rect x="111.5" y="627.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="114.5" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (6 samples, 0.12%)</title><rect x="112.7" y="627.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="115.7" y="638.0"></text>
</g>
<g>
<title>/usr/lib64/libpthread-2.17.so (2 samples, 0.04%)</title><rect x="113.4" y="611.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="116.4" y="622.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/AbstractScheduledEventExecutor.deadlineToDelayNanos (2 samples, 0.04%)</title><rect x="114.0" y="691.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="117.0" y="702.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/ScheduledFutureTask.deadlineToDelayNanos (2 samples, 0.04%)</title><rect x="114.0" y="675.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="117.0" y="686.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="114.0" y="659.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="117.0" y="670.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.04%)</title><rect x="114.0" y="643.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="117.0" y="654.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.runAllTasks (623 samples, 12.18%)</title><rect x="114.5" y="707.0" width="143.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.5" y="718.0">io/netty/util/conc..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/DefaultWriteCoalescer$Flusher$$Lambda$179/1058735320.run (4 samples, 0.08%)</title><rect x="114.7" y="691.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="117.7" y="702.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/AbstractEventExecutor.safeExecute (593 samples, 11.59%)</title><rect x="115.7" y="691.0" width="136.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="118.7" y="702.0">io/netty/util/con..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/DefaultWriteCoalescer$Flusher$$Lambda$179/1058735320.run (584 samples, 11.42%)</title><rect x="115.7" y="675.0" width="134.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="118.7" y="686.0">com/datastax/oss/..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/DefaultWriteCoalescer$Flusher.runOnEventLoop (583 samples, 11.40%)</title><rect x="115.7" y="659.0" width="134.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="118.7" y="670.0">com/datastax/oss/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.flush (123 samples, 2.40%)</title><rect x="116.1" y="643.0" width="28.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="119.1" y="654.0">io..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.flush (123 samples, 2.40%)</title><rect x="116.1" y="627.0" width="28.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="119.1" y="638.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (123 samples, 2.40%)</title><rect x="116.1" y="611.0" width="28.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.1" y="622.0">io..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.executor (2 samples, 0.04%)</title><rect x="116.1" y="595.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="119.1" y="606.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (121 samples, 2.37%)</title><rect x="116.6" y="595.0" width="27.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="119.6" y="606.0">i..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (121 samples, 2.37%)</title><rect x="116.6" y="579.0" width="27.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="119.6" y="590.0">i..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.flush (120 samples, 2.35%)</title><rect x="116.8" y="563.0" width="27.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="119.8" y="574.0">i..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush (117 samples, 2.29%)</title><rect x="117.3" y="547.0" width="27.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="120.3" y="558.0">i..</text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe.flush0 (117 samples, 2.29%)</title><rect x="117.3" y="531.0" width="27.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="120.3" y="542.0">i..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush0 (117 samples, 2.29%)</title><rect x="117.3" y="515.0" width="27.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="120.3" y="526.0">i..</text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.doWrite (116 samples, 2.27%)</title><rect x="117.3" y="499.0" width="26.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="120.3" y="510.0">i..</text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.nioBuffers (25 samples, 0.49%)</title><rect x="117.5" y="483.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="120.5" y="494.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.nioBuffers (17 samples, 0.33%)</title><rect x="119.1" y="467.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="122.1" y="478.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf.nioBuffers (14 samples, 0.27%)</title><rect x="119.8" y="451.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="122.8" y="462.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf.nioBuffers (14 samples, 0.27%)</title><rect x="119.8" y="435.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.8" y="446.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.nioBuffer (6 samples, 0.12%)</title><rect x="119.8" y="419.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="122.8" y="430.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.duplicateInternalNioBuffer (5 samples, 0.10%)</title><rect x="120.0" y="403.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="123.0" y="414.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf._internalNioBuffer (4 samples, 0.08%)</title><rect x="120.3" y="387.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="123.3" y="398.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.newInternalNioBuffer (3 samples, 0.06%)</title><rect x="120.5" y="371.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="123.5" y="382.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.newInternalNioBuffer (3 samples, 0.06%)</title><rect x="120.5" y="355.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="123.5" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.duplicate (3 samples, 0.06%)</title><rect x="120.5" y="339.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="123.5" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.04%)</title><rect x="120.7" y="323.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="123.7" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.04%)</title><rect x="120.7" y="307.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="123.7" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.04%)</title><rect x="120.7" y="291.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="123.7" y="302.0"></text>
</g>
<g>
<title>io/netty/util/internal/RecyclableArrayList.newInstance (7 samples, 0.14%)</title><rect x="121.2" y="419.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="124.2" y="430.0"></text>
</g>
<g>
<title>io/netty/util/internal/ObjectPool$RecyclerObjectPool.get (7 samples, 0.14%)</title><rect x="121.2" y="403.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="124.2" y="414.0"></text>
</g>
<g>
<title>io/netty/util/Recycler.get (7 samples, 0.14%)</title><rect x="121.2" y="387.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="124.2" y="398.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.newHandle (5 samples, 0.10%)</title><rect x="121.4" y="371.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="124.4" y="382.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$DefaultHandle.&lt;init&gt; (5 samples, 0.10%)</title><rect x="121.4" y="355.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="124.4" y="366.0"></text>
</g>
<g>
<title>BarrierSet::static_write_ref_array_post(HeapWord*, unsigned long) (4 samples, 0.08%)</title><rect x="121.4" y="339.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="124.4" y="350.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.removeBytes (63 samples, 1.23%)</title><rect x="123.3" y="483.0" width="14.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="126.3" y="494.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.remove (63 samples, 1.23%)</title><rect x="123.3" y="467.0" width="14.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.3" y="478.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.removeEntry (2 samples, 0.04%)</title><rect x="123.5" y="451.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.5" y="462.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.safeSuccess (32 samples, 0.63%)</title><rect x="124.0" y="451.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="127.0" y="462.0"></text>
</g>
<g>
<title>io/netty/util/internal/PromiseNotificationUtil.trySuccess (32 samples, 0.63%)</title><rect x="124.0" y="435.0" width="7.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="127.0" y="446.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.trySuccess (32 samples, 0.63%)</title><rect x="124.0" y="419.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="127.0" y="430.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.setSuccess0 (32 samples, 0.63%)</title><rect x="124.0" y="403.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="127.0" y="414.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.setValue0 (32 samples, 0.63%)</title><rect x="124.0" y="387.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="127.0" y="398.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.notifyListeners (32 samples, 0.63%)</title><rect x="124.0" y="371.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="127.0" y="382.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.notifyListenersNow (32 samples, 0.63%)</title><rect x="124.0" y="355.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="127.0" y="366.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.notifyListeners0 (28 samples, 0.55%)</title><rect x="124.9" y="339.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="127.9" y="350.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.notifyListener0 (20 samples, 0.39%)</title><rect x="125.6" y="323.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="128.6" y="334.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler$NodeResponseCallback.operationComplete (19 samples, 0.37%)</title><rect x="125.8" y="307.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.8" y="318.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler$NodeResponseCallback.scheduleSpeculativeExecution (12 samples, 0.23%)</title><rect x="126.5" y="291.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="129.5" y="302.0"></text>
</g>
<g>
<title>io/netty/util/HashedWheelTimer.newTimeout (8 samples, 0.16%)</title><rect x="127.0" y="275.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="130.0" y="286.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="127.7" y="259.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="130.7" y="270.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.04%)</title><rect x="127.7" y="243.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="130.7" y="254.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.add (2 samples, 0.04%)</title><rect x="128.3" y="259.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.3" y="270.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscUnboundedArrayQueue.offer (2 samples, 0.04%)</title><rect x="128.3" y="243.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="131.3" y="254.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/BaseMpscLinkedArrayQueue.offer (2 samples, 0.04%)</title><rect x="128.3" y="227.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="131.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.add (2 samples, 0.04%)</title><rect x="128.8" y="275.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="131.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.04%)</title><rect x="128.8" y="259.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="131.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.add (4 samples, 0.08%)</title><rect x="129.3" y="291.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="132.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="129.5" y="275.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (2 samples, 0.04%)</title><rect x="129.5" y="259.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="132.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="129.5" y="243.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.5" y="254.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.10%)</title><rect x="130.2" y="323.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="133.2" y="334.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.safeRelease (28 samples, 0.55%)</title><rect x="131.3" y="451.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="134.3" y="462.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.release (28 samples, 0.55%)</title><rect x="131.3" y="435.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="134.3" y="446.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (28 samples, 0.55%)</title><rect x="131.3" y="419.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="134.3" y="430.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (28 samples, 0.55%)</title><rect x="131.3" y="403.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="134.3" y="414.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf.deallocate (25 samples, 0.49%)</title><rect x="131.6" y="387.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="134.6" y="398.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf$Component.free (25 samples, 0.49%)</title><rect x="131.6" y="371.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="134.6" y="382.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (23 samples, 0.45%)</title><rect x="131.8" y="355.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="134.8" y="366.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (23 samples, 0.45%)</title><rect x="131.8" y="339.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="134.8" y="350.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.tinyIdx (2 samples, 0.04%)</title><rect x="132.0" y="323.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="135.0" y="334.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.deallocate (20 samples, 0.39%)</title><rect x="132.5" y="323.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="135.5" y="334.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.free (15 samples, 0.29%)</title><rect x="133.0" y="307.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="136.0" y="318.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.add (14 samples, 0.27%)</title><rect x="133.2" y="291.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="136.2" y="302.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.add (7 samples, 0.14%)</title><rect x="133.2" y="275.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="136.2" y="286.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscArrayQueue.offer (7 samples, 0.14%)</title><rect x="133.2" y="259.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="136.2" y="270.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscArrayQueueProducerLimitField.lvProducerLimit (2 samples, 0.04%)</title><rect x="133.4" y="243.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="136.4" y="254.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/util/UnsafeRefArrayAccess.soRefElement (3 samples, 0.06%)</title><rect x="134.1" y="243.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="137.1" y="254.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cache (7 samples, 0.14%)</title><rect x="134.8" y="275.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="137.8" y="286.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cacheForNormal (5 samples, 0.10%)</title><rect x="134.8" y="259.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="137.8" y="270.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cacheForTiny (2 samples, 0.04%)</title><rect x="136.0" y="259.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="139.0" y="270.0"></text>
</g>
<g>
<title>io/netty/util/Recycler.access$1000 (2 samples, 0.04%)</title><rect x="136.4" y="307.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="139.4" y="318.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.deallocate (2 samples, 0.04%)</title><rect x="137.3" y="387.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="140.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (27 samples, 0.53%)</title><rect x="137.8" y="483.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="140.8" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (24 samples, 0.47%)</title><rect x="138.0" y="467.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="141.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOVecWrapper.get (8 samples, 0.16%)</title><rect x="138.3" y="451.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="141.3" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.14%)</title><rect x="138.3" y="435.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="141.3" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 0.14%)</title><rect x="138.3" y="419.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.3" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.14%)</title><rect x="138.3" y="403.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="141.3" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.10%)</title><rect x="138.7" y="387.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="141.7" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.nextIndex (2 samples, 0.04%)</title><rect x="139.4" y="371.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="142.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (15 samples, 0.29%)</title><rect x="140.1" y="451.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="143.1" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (15 samples, 0.29%)</title><rect x="140.1" y="435.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="143.1" y="446.0"></text>
</g>
<g>
<title>__libc_writev (7 samples, 0.14%)</title><rect x="141.3" y="419.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="144.3" y="430.0"></text>
</g>
<g>
<title>convertLongReturnVal (2 samples, 0.04%)</title><rect x="142.9" y="419.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="145.9" y="430.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.write (427 samples, 8.35%)</title><rect x="144.5" y="643.0" width="98.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="147.5" y="654.0">io/netty/cha..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.write (427 samples, 8.35%)</title><rect x="144.5" y="627.0" width="98.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="147.5" y="638.0">io/netty/cha..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (427 samples, 8.35%)</title><rect x="144.5" y="611.0" width="98.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="147.5" y="622.0">io/netty/cha..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/InFlightHandler.write (5 samples, 0.10%)</title><rect x="144.5" y="595.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="147.5" y="606.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (420 samples, 8.21%)</title><rect x="145.6" y="595.0" width="96.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.6" y="606.0">io/netty/ch..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (418 samples, 8.17%)</title><rect x="145.6" y="579.0" width="96.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="148.6" y="590.0">io/netty/ch..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (418 samples, 8.17%)</title><rect x="145.6" y="563.0" width="96.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="148.6" y="574.0">io/netty/ch..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/InFlightHandler.write (414 samples, 8.09%)</title><rect x="146.6" y="547.0" width="95.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="149.6" y="558.0">com/datasta..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/InFlightHandler.write (414 samples, 8.09%)</title><rect x="146.6" y="531.0" width="95.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="149.6" y="542.0">com/datasta..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/StreamIdGenerator.acquire (3 samples, 0.06%)</title><rect x="147.5" y="515.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="150.5" y="526.0"></text>
</g>
<g>
<title>java/util/BitSet.set (3 samples, 0.06%)</title><rect x="147.5" y="499.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="150.5" y="510.0"></text>
</g>
<g>
<title>java/util/BitSet.expandTo (2 samples, 0.04%)</title><rect x="147.7" y="483.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="150.7" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/HashBiMap.containsKey (2 samples, 0.04%)</title><rect x="148.2" y="515.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="151.2" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/HashBiMap.put (25 samples, 0.49%)</title><rect x="148.6" y="515.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="151.6" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/HashBiMap.put (25 samples, 0.49%)</title><rect x="148.6" y="499.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="151.6" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/HashBiMap.insert (10 samples, 0.20%)</title><rect x="149.6" y="483.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="152.6" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/Hashing.smearedHash (11 samples, 0.22%)</title><rect x="151.9" y="483.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="154.9" y="494.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (11 samples, 0.22%)</title><rect x="151.9" y="467.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="154.9" y="478.0"></text>
</g>
<g>
<title>JVM_IHashCode (9 samples, 0.18%)</title><rect x="151.9" y="451.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="154.9" y="462.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (6 samples, 0.12%)</title><rect x="152.1" y="435.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="155.1" y="446.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (2 samples, 0.04%)</title><rect x="153.0" y="419.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="156.0" y="430.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (369 samples, 7.21%)</title><rect x="154.6" y="515.0" width="85.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="157.6" y="526.0">io/netty/c..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (365 samples, 7.14%)</title><rect x="154.9" y="499.0" width="84.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="157.9" y="510.0">io/netty/c..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (365 samples, 7.14%)</title><rect x="154.9" y="483.0" width="84.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="157.9" y="494.0">io/netty/c..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (365 samples, 7.14%)</title><rect x="154.9" y="467.0" width="84.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="157.9" y="478.0">io/netty/c..</text>
</g>
<g>
<title>io/netty/handler/timeout/IdleStateHandler.write (362 samples, 7.08%)</title><rect x="155.6" y="451.0" width="83.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="158.6" y="462.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (362 samples, 7.08%)</title><rect x="155.6" y="435.0" width="83.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="158.6" y="446.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (360 samples, 7.04%)</title><rect x="155.6" y="419.0" width="83.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="158.6" y="430.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (359 samples, 7.02%)</title><rect x="155.8" y="403.0" width="82.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="158.8" y="414.0">io/netty/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (359 samples, 7.02%)</title><rect x="155.8" y="387.0" width="82.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="158.8" y="398.0">io/netty/..</text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageEncoder.write (359 samples, 7.02%)</title><rect x="155.8" y="371.0" width="82.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="158.8" y="382.0">io/netty/..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/FrameEncoder.encode (341 samples, 6.67%)</title><rect x="155.8" y="355.0" width="78.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="158.8" y="366.0">com/datas..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/FrameEncoder.encode (341 samples, 6.67%)</title><rect x="155.8" y="339.0" width="78.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="158.8" y="350.0">com/datas..</text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/FrameCodec.encode (341 samples, 6.67%)</title><rect x="155.8" y="323.0" width="78.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="158.8" y="334.0">com/datas..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufCompressor.compress (196 samples, 3.83%)</title><rect x="156.5" y="307.0" width="45.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="159.5" y="318.0">com/..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufCompressor.compress (196 samples, 3.83%)</title><rect x="156.5" y="291.0" width="45.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="159.5" y="302.0">com/..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/Lz4Compressor.compressDirect (196 samples, 3.83%)</title><rect x="156.5" y="275.0" width="45.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="159.5" y="286.0">com/..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufCompressor.inputNioBuffer (5 samples, 0.10%)</title><rect x="156.5" y="259.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.5" y="270.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.internalNioBuffer (4 samples, 0.08%)</title><rect x="156.5" y="243.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="159.5" y="254.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.checkIndex (2 samples, 0.04%)</title><rect x="156.5" y="227.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="159.5" y="238.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureAccessible (2 samples, 0.04%)</title><rect x="156.5" y="211.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="159.5" y="222.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.isAccessible (2 samples, 0.04%)</title><rect x="156.5" y="195.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.5" y="206.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.isLiveNonVolatile (2 samples, 0.04%)</title><rect x="156.5" y="179.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="159.5" y="190.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf._internalNioBuffer (2 samples, 0.04%)</title><rect x="156.5" y="163.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="159.5" y="174.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf._internalNioBuffer (2 samples, 0.04%)</title><rect x="157.0" y="227.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="160.0" y="238.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.internalNioBuffer (2 samples, 0.04%)</title><rect x="157.0" y="211.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.0" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.clear (2 samples, 0.04%)</title><rect x="157.0" y="195.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="160.0" y="206.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (25 samples, 0.49%)</title><rect x="157.6" y="259.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="160.6" y="270.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (24 samples, 0.47%)</title><rect x="157.9" y="243.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="160.9" y="254.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.newDirectBuffer (24 samples, 0.47%)</title><rect x="157.9" y="227.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="160.9" y="238.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.toLeakAwareBuffer (2 samples, 0.04%)</title><rect x="158.3" y="211.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="161.3" y="222.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track (2 samples, 0.04%)</title><rect x="158.3" y="195.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.3" y="206.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track0 (2 samples, 0.04%)</title><rect x="158.3" y="179.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="161.3" y="190.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.&lt;init&gt; (2 samples, 0.04%)</title><rect x="158.3" y="163.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.3" y="174.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$Record.&lt;init&gt; (2 samples, 0.04%)</title><rect x="158.3" y="147.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="161.3" y="158.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (2 samples, 0.04%)</title><rect x="158.3" y="131.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="161.3" y="142.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (2 samples, 0.04%)</title><rect x="158.3" y="115.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="161.3" y="126.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (2 samples, 0.04%)</title><rect x="158.3" y="99.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.3" y="110.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (2 samples, 0.04%)</title><rect x="158.3" y="83.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="161.3" y="94.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (2 samples, 0.04%)</title><rect x="158.3" y="67.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="161.3" y="78.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (2 samples, 0.04%)</title><rect x="158.3" y="51.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="161.3" y="62.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (2 samples, 0.04%)</title><rect x="158.3" y="35.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="161.3" y="46.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (18 samples, 0.35%)</title><rect x="158.8" y="211.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="161.8" y="222.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena$DirectArena.newByteBuf (6 samples, 0.12%)</title><rect x="158.8" y="195.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.8" y="206.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.newInstance (6 samples, 0.12%)</title><rect x="158.8" y="179.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="161.8" y="190.0"></text>
</g>
<g>
<title>io/netty/util/internal/ObjectPool$RecyclerObjectPool.get (6 samples, 0.12%)</title><rect x="158.8" y="163.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="161.8" y="174.0"></text>
</g>
<g>
<title>io/netty/util/Recycler.get (6 samples, 0.12%)</title><rect x="158.8" y="147.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.8" y="158.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.nioBufferCount (2 samples, 0.04%)</title><rect x="159.5" y="131.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="162.5" y="142.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (9 samples, 0.18%)</title><rect x="160.2" y="195.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="163.2" y="206.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBufWithSubpage (2 samples, 0.04%)</title><rect x="160.4" y="179.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="163.4" y="190.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBufWithSubpage (2 samples, 0.04%)</title><rect x="160.4" y="163.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="163.4" y="174.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocateNormal (2 samples, 0.04%)</title><rect x="160.9" y="179.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="163.9" y="190.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocateTiny (4 samples, 0.08%)</title><rect x="161.3" y="179.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="164.3" y="190.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cacheForTiny (4 samples, 0.08%)</title><rect x="161.3" y="163.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="164.3" y="174.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena$DirectArena.isDirect (3 samples, 0.06%)</title><rect x="161.3" y="147.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="164.3" y="158.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.04%)</title><rect x="161.6" y="131.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="164.6" y="142.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocal.get (2 samples, 0.04%)</title><rect x="163.0" y="211.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="166.0" y="222.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4JNICompressor.compress (166 samples, 3.25%)</title><rect x="163.4" y="259.0" width="38.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.4" y="270.0">net..</text>
</g>
<g>
<title>net/jpountz/lz4/LZ4JNI.LZ4_compress_limitedOutput (166 samples, 3.25%)</title><rect x="163.4" y="243.0" width="38.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="166.4" y="254.0">net..</text>
</g>
<g>
<title>Java_net_jpountz_lz4_LZ4JNI_LZ4_1compress_1limitedOutput (8 samples, 0.16%)</title><rect x="163.4" y="227.0" width="1.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="166.4" y="238.0"></text>
</g>
<g>
<title>jni_GetDirectBufferAddress (4 samples, 0.08%)</title><rect x="164.1" y="211.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="167.1" y="222.0"></text>
</g>
<g>
<title>java_lang_Class::as_Klass(oopDesc*) (2 samples, 0.04%)</title><rect x="164.3" y="195.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="167.3" y="206.0"></text>
</g>
<g>
<title>LZ4_compress_default (5 samples, 0.10%)</title><rect x="165.7" y="227.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="168.7" y="238.0"></text>
</g>
<g>
<title>LZ4_compress_fast (2 samples, 0.04%)</title><rect x="166.9" y="227.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="169.9" y="238.0"></text>
</g>
<g>
<title>LZ4_compress_fast_extState (112 samples, 2.19%)</title><rect x="167.3" y="227.0" width="25.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="170.3" y="238.0">L..</text>
</g>
<g>
<title>LZ4_initStream@plt (2 samples, 0.04%)</title><rect x="193.6" y="227.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="196.6" y="238.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.12%)</title><rect x="194.1" y="227.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="197.1" y="238.0"></text>
</g>
<g>
<title>LZ4_compress_fast_extState (6 samples, 0.12%)</title><rect x="194.1" y="211.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="197.1" y="222.0"></text>
</g>
<g>
<title>__memset_sse2 (23 samples, 0.45%)</title><rect x="195.5" y="227.0" width="5.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="198.5" y="238.0"></text>
</g>
<g>
<title>jni_GetDirectBufferAddress (4 samples, 0.08%)</title><rect x="200.8" y="227.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="203.8" y="238.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.allocate (33 samples, 0.65%)</title><rect x="201.7" y="307.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="204.7" y="318.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.allocate (33 samples, 0.65%)</title><rect x="201.7" y="291.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.7" y="302.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.ioBuffer (33 samples, 0.65%)</title><rect x="201.7" y="275.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.7" y="286.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (33 samples, 0.65%)</title><rect x="201.7" y="259.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.7" y="270.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.newDirectBuffer (33 samples, 0.65%)</title><rect x="201.7" y="243.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.7" y="254.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.toLeakAwareBuffer (10 samples, 0.20%)</title><rect x="202.2" y="227.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.2" y="238.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track (10 samples, 0.20%)</title><rect x="202.2" y="211.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.2" y="222.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track0 (10 samples, 0.20%)</title><rect x="202.2" y="195.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="205.2" y="206.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.&lt;init&gt; (8 samples, 0.16%)</title><rect x="202.2" y="179.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="205.2" y="190.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$Record.&lt;init&gt; (8 samples, 0.16%)</title><rect x="202.2" y="163.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="205.2" y="174.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (8 samples, 0.16%)</title><rect x="202.2" y="147.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.2" y="158.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (8 samples, 0.16%)</title><rect x="202.2" y="131.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="205.2" y="142.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (8 samples, 0.16%)</title><rect x="202.2" y="115.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.2" y="126.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (8 samples, 0.16%)</title><rect x="202.2" y="99.0" width="1.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="205.2" y="110.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (8 samples, 0.16%)</title><rect x="202.2" y="83.0" width="1.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="205.2" y="94.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (8 samples, 0.16%)</title><rect x="202.2" y="67.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="205.2" y="78.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (7 samples, 0.14%)</title><rect x="202.4" y="51.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="205.4" y="62.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.04%)</title><rect x="203.6" y="35.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="206.6" y="46.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.threadLocalRandom (2 samples, 0.04%)</title><rect x="204.0" y="179.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="207.0" y="190.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent$2.current (2 samples, 0.04%)</title><rect x="204.0" y="163.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.current (2 samples, 0.04%)</title><rect x="204.0" y="147.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="207.0" y="158.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (21 samples, 0.41%)</title><rect x="204.5" y="227.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.5" y="238.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena$DirectArena.newByteBuf (5 samples, 0.10%)</title><rect x="204.5" y="211.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.5" y="222.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.newInstance (5 samples, 0.10%)</title><rect x="204.5" y="195.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.5" y="206.0"></text>
</g>
<g>
<title>io/netty/util/internal/ObjectPool$RecyclerObjectPool.get (5 samples, 0.10%)</title><rect x="204.5" y="179.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="207.5" y="190.0"></text>
</g>
<g>
<title>io/netty/util/Recycler.get (4 samples, 0.08%)</title><rect x="204.7" y="163.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="207.7" y="174.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocal.get (2 samples, 0.04%)</title><rect x="205.2" y="147.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="208.2" y="158.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.indexedVariable (2 samples, 0.04%)</title><rect x="205.2" y="131.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.2" y="142.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (16 samples, 0.31%)</title><rect x="205.6" y="211.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.6" y="222.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocateNormal (10 samples, 0.20%)</title><rect x="205.9" y="195.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="208.9" y="206.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocate (10 samples, 0.20%)</title><rect x="205.9" y="179.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="208.9" y="190.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.allocate (10 samples, 0.20%)</title><rect x="205.9" y="163.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.9" y="174.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$NormalMemoryRegionCache.initBuf (5 samples, 0.10%)</title><rect x="206.1" y="147.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.1" y="158.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBuf (5 samples, 0.10%)</title><rect x="206.1" y="131.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.1" y="142.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.runOffset (3 samples, 0.06%)</title><rect x="206.1" y="115.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="209.1" y="126.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.depth (3 samples, 0.06%)</title><rect x="206.1" y="99.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="209.1" y="110.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscArrayQueue.poll (4 samples, 0.08%)</title><rect x="207.2" y="147.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="210.2" y="158.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/util/UnsafeRefArrayAccess.soRefElement (2 samples, 0.04%)</title><rect x="207.7" y="131.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="210.7" y="142.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocateTiny (5 samples, 0.10%)</title><rect x="208.2" y="195.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.2" y="206.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocate (5 samples, 0.10%)</title><rect x="208.2" y="179.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="211.2" y="190.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.allocate (4 samples, 0.08%)</title><rect x="208.4" y="163.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="211.4" y="174.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$SubPageMemoryRegionCache.initBuf (2 samples, 0.04%)</title><rect x="208.6" y="147.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="211.6" y="158.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBufWithSubpage (2 samples, 0.04%)</title><rect x="208.6" y="131.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="211.6" y="142.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBufWithSubpage (2 samples, 0.04%)</title><rect x="208.6" y="115.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="211.6" y="126.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.concat (14 samples, 0.27%)</title><rect x="209.3" y="307.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="212.3" y="318.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.concat (14 samples, 0.27%)</title><rect x="209.3" y="291.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="212.3" y="302.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.compositeBuffer (5 samples, 0.10%)</title><rect x="209.3" y="275.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.3" y="286.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.compositeDirectBuffer (5 samples, 0.10%)</title><rect x="209.3" y="259.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="212.3" y="270.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.toLeakAwareBuffer (5 samples, 0.10%)</title><rect x="209.3" y="243.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="212.3" y="254.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track (5 samples, 0.10%)</title><rect x="209.3" y="227.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="212.3" y="238.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track0 (5 samples, 0.10%)</title><rect x="209.3" y="211.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.3" y="222.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.&lt;init&gt; (5 samples, 0.10%)</title><rect x="209.3" y="195.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="212.3" y="206.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf.addComponents (9 samples, 0.18%)</title><rect x="210.5" y="275.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="213.5" y="286.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf.addComponents (9 samples, 0.18%)</title><rect x="210.5" y="259.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.5" y="270.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf.addComponents0 (9 samples, 0.18%)</title><rect x="210.5" y="243.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.5" y="254.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf.newComponent (6 samples, 0.12%)</title><rect x="211.2" y="227.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.2" y="238.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.release (5 samples, 0.10%)</title><rect x="212.5" y="307.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="215.5" y="318.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.release (5 samples, 0.10%)</title><rect x="212.5" y="291.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.5" y="302.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (5 samples, 0.10%)</title><rect x="212.5" y="275.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="215.5" y="286.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (5 samples, 0.10%)</title><rect x="212.5" y="259.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="215.5" y="270.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf.deallocate (4 samples, 0.08%)</title><rect x="212.5" y="243.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="215.5" y="254.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf$Component.free (4 samples, 0.08%)</title><rect x="212.5" y="227.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.5" y="238.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (4 samples, 0.08%)</title><rect x="212.5" y="211.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="215.5" y="222.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (2 samples, 0.04%)</title><rect x="212.5" y="195.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.5" y="206.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.deallocate (2 samples, 0.04%)</title><rect x="212.5" y="179.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.5" y="190.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.free (2 samples, 0.04%)</title><rect x="212.5" y="163.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.5" y="174.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.release (2 samples, 0.04%)</title><rect x="213.0" y="195.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.0" y="206.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.tryFinalRelease0 (2 samples, 0.04%)</title><rect x="213.0" y="179.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.0" y="190.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf$1.updater (2 samples, 0.04%)</title><rect x="213.0" y="163.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.0" y="174.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/FrameCodec.encodeBodyInto (44 samples, 0.86%)</title><rect x="213.9" y="307.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.9" y="318.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/request/Execute$Codec.encode (44 samples, 0.86%)</title><rect x="213.9" y="291.0" width="10.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.9" y="302.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.writeShortBytes (11 samples, 0.22%)</title><rect x="213.9" y="275.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.9" y="286.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.writeShortBytes (11 samples, 0.22%)</title><rect x="213.9" y="259.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="216.9" y="270.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.writeUnsignedShort (4 samples, 0.08%)</title><rect x="213.9" y="243.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.9" y="254.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeShort (4 samples, 0.08%)</title><rect x="213.9" y="227.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="216.9" y="238.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureWritable0 (2 samples, 0.04%)</title><rect x="213.9" y="211.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="216.9" y="222.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureAccessible (2 samples, 0.04%)</title><rect x="213.9" y="195.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.9" y="206.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf._setShort (2 samples, 0.04%)</title><rect x="214.4" y="211.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.4" y="222.0"></text>
</g>
<g>
<title>io/netty/buffer/UnsafeByteBufUtil.setShort (2 samples, 0.04%)</title><rect x="214.4" y="195.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.4" y="206.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.putShort (2 samples, 0.04%)</title><rect x="214.4" y="179.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="217.4" y="190.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.putShort (2 samples, 0.04%)</title><rect x="214.4" y="163.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.4" y="174.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (7 samples, 0.14%)</title><rect x="214.9" y="243.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="217.9" y="254.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (7 samples, 0.14%)</title><rect x="214.9" y="227.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.9" y="238.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureWritable (2 samples, 0.04%)</title><rect x="214.9" y="211.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="217.9" y="222.0"></text>
</g>
<g>
<title>io/netty/util/internal/ObjectUtil.checkPositiveOrZero (2 samples, 0.04%)</title><rect x="214.9" y="195.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="217.9" y="206.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.setBytes (5 samples, 0.10%)</title><rect x="215.3" y="211.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="218.3" y="222.0"></text>
</g>
<g>
<title>io/netty/buffer/UnsafeByteBufUtil.setBytes (4 samples, 0.08%)</title><rect x="215.5" y="195.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="218.5" y="206.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.checkIndex (3 samples, 0.06%)</title><rect x="215.5" y="179.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="218.5" y="190.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureAccessible (3 samples, 0.06%)</title><rect x="215.5" y="163.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="218.5" y="174.0"></text>
</g>
<g>
<title>unsafe_arraycopy (2 samples, 0.04%)</title><rect x="215.8" y="147.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="218.8" y="158.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/request/query/QueryOptions$Codec.encode (33 samples, 0.65%)</title><rect x="216.5" y="275.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="219.5" y="286.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/request/query/Values.writePositionalValues (33 samples, 0.65%)</title><rect x="216.5" y="259.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="219.5" y="270.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/request/query/Values.writeValue (32 samples, 0.63%)</title><rect x="216.5" y="243.0" width="7.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="219.5" y="254.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.writeBytes (31 samples, 0.61%)</title><rect x="216.7" y="227.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="219.7" y="238.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufPrimitiveCodec.writeBytes (31 samples, 0.61%)</title><rect x="216.7" y="211.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="219.7" y="222.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (22 samples, 0.43%)</title><rect x="217.2" y="195.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.2" y="206.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.setBytes (21 samples, 0.41%)</title><rect x="217.4" y="179.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="220.4" y="190.0"></text>
</g>
<g>
<title>io/netty/buffer/UnsafeByteBufUtil.setBytes (21 samples, 0.41%)</title><rect x="217.4" y="163.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="220.4" y="174.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.checkIndex (3 samples, 0.06%)</title><rect x="217.4" y="147.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="220.4" y="158.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureAccessible (3 samples, 0.06%)</title><rect x="217.4" y="131.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.4" y="142.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.isAccessible (3 samples, 0.06%)</title><rect x="217.4" y="115.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="220.4" y="126.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.isLiveNonVolatile (3 samples, 0.06%)</title><rect x="217.4" y="99.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.4" y="110.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.access$100 (2 samples, 0.04%)</title><rect x="217.4" y="83.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.4" y="94.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.copyMemory (18 samples, 0.35%)</title><rect x="218.1" y="147.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.1" y="158.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.copyMemory (18 samples, 0.35%)</title><rect x="218.1" y="131.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="221.1" y="142.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.copyMemoryWithSafePointPolling (18 samples, 0.35%)</title><rect x="218.1" y="115.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.1" y="126.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (18 samples, 0.35%)</title><rect x="218.1" y="99.0" width="4.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="221.1" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (7 samples, 0.14%)</title><rect x="222.2" y="195.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="225.2" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.04%)</title><rect x="223.4" y="179.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="226.4" y="190.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.04%)</title><rect x="223.4" y="163.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="226.4" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.04%)</title><rect x="223.4" y="147.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="226.4" y="158.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.04%)</title><rect x="223.4" y="131.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="226.4" y="142.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.04%)</title><rect x="223.4" y="115.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="226.4" y="126.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (2 samples, 0.04%)</title><rect x="223.4" y="99.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="226.4" y="110.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (2 samples, 0.04%)</title><rect x="223.4" y="83.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="226.4" y="94.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/FrameCodec.encodedBodySize (30 samples, 0.59%)</title><rect x="224.1" y="307.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.1" y="318.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/FrameCodec.getMessageEncoder (12 samples, 0.23%)</title><rect x="224.1" y="291.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.1" y="302.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/request/query/Values.writeValue (2 samples, 0.04%)</title><rect x="224.3" y="275.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.3" y="286.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/util/IntIntMap.get (5 samples, 0.10%)</title><rect x="224.8" y="275.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="227.8" y="286.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/util/IntMap.get (3 samples, 0.06%)</title><rect x="225.0" y="259.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="228.0" y="270.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/ByteBufCompressor.compress (2 samples, 0.04%)</title><rect x="225.0" y="243.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.0" y="254.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (4 samples, 0.08%)</title><rect x="225.9" y="275.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.9" y="286.0"></text>
</g>
<g>
<title>java/lang/Integer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="226.2" y="259.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.2" y="270.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/request/Execute$Codec.encodedSize (18 samples, 0.35%)</title><rect x="226.9" y="291.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.9" y="302.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/request/query/QueryOptions$Codec.encodedSize (18 samples, 0.35%)</title><rect x="226.9" y="275.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="229.9" y="286.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/request/query/Values.sizeOfPositionalValues (11 samples, 0.22%)</title><rect x="227.5" y="259.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.5" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractList$Itr.hasNext (6 samples, 0.12%)</title><rect x="227.5" y="243.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.5" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays$ArrayList.size (6 samples, 0.12%)</title><rect x="227.5" y="227.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.5" y="238.0"></text>
</g>
<g>
<title>java/util/AbstractList.iterator (5 samples, 0.10%)</title><rect x="228.9" y="243.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="231.9" y="254.0"></text>
</g>
<g>
<title>java/util/AbstractList$Itr.&lt;init&gt; (5 samples, 0.10%)</title><rect x="228.9" y="227.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.9" y="238.0"></text>
</g>
<g>
<title>java/util/AbstractList$Itr.&lt;init&gt; (4 samples, 0.08%)</title><rect x="229.2" y="211.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.2" y="222.0"></text>
</g>
<g>
<title>io/netty/buffer/UnsafeByteBufUtil.setShort (3 samples, 0.06%)</title><rect x="229.4" y="195.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.4" y="206.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf._setShort (4 samples, 0.08%)</title><rect x="230.1" y="259.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="233.1" y="270.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/FrameCodec.getMessageEncoder (11 samples, 0.22%)</title><rect x="231.0" y="307.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.0" y="318.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/util/IntIntMap.get (4 samples, 0.08%)</title><rect x="231.7" y="291.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.7" y="302.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/util/IntMap.get (3 samples, 0.06%)</title><rect x="231.9" y="275.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.9" y="286.0"></text>
</g>
<g>
<title>io/netty/buffer/UnsafeByteBufUtil.setByte (2 samples, 0.04%)</title><rect x="232.6" y="291.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="235.6" y="302.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (2 samples, 0.04%)</title><rect x="233.1" y="291.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="236.1" y="302.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (3 samples, 0.06%)</title><rect x="233.8" y="307.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.8" y="318.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (17 samples, 0.33%)</title><rect x="234.5" y="355.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="237.5" y="366.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (14 samples, 0.27%)</title><rect x="234.5" y="339.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.5" y="350.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (10 samples, 0.20%)</title><rect x="234.5" y="323.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.5" y="334.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (10 samples, 0.20%)</title><rect x="234.5" y="307.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.5" y="318.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.write (6 samples, 0.12%)</title><rect x="235.4" y="291.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.4" y="302.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.write (6 samples, 0.12%)</title><rect x="235.4" y="275.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.4" y="286.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.addMessage (4 samples, 0.08%)</title><rect x="235.6" y="259.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="238.6" y="270.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer$Entry.newInstance (4 samples, 0.08%)</title><rect x="235.6" y="243.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="238.6" y="254.0"></text>
</g>
<g>
<title>io/netty/util/internal/ObjectPool$RecyclerObjectPool.get (3 samples, 0.06%)</title><rect x="235.8" y="227.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.8" y="238.0"></text>
</g>
<g>
<title>io/netty/util/Recycler.get (3 samples, 0.06%)</title><rect x="235.8" y="211.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.8" y="222.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.pop (3 samples, 0.06%)</title><rect x="235.8" y="195.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="238.8" y="206.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.scavenge (2 samples, 0.04%)</title><rect x="236.1" y="179.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.1" y="190.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.touch (4 samples, 0.08%)</title><rect x="236.8" y="323.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="239.8" y="334.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.06%)</title><rect x="237.0" y="307.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="240.0" y="318.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.write (2 samples, 0.04%)</title><rect x="237.7" y="339.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.7" y="350.0"></text>
</g>
<g>
<title>io/netty/handler/timeout/IdleStateHandler.write (2 samples, 0.04%)</title><rect x="239.1" y="499.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.1" y="510.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPromise.addListener (8 samples, 0.16%)</title><rect x="239.8" y="515.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="242.8" y="526.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPromise.addListener (8 samples, 0.16%)</title><rect x="239.8" y="499.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.8" y="510.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.addListener (8 samples, 0.16%)</title><rect x="239.8" y="483.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.8" y="494.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.addListener0 (8 samples, 0.16%)</title><rect x="239.8" y="467.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.8" y="478.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (2 samples, 0.04%)</title><rect x="241.6" y="515.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.6" y="526.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.04%)</title><rect x="242.5" y="595.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="245.5" y="606.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (3 samples, 0.06%)</title><rect x="243.0" y="643.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.04%)</title><rect x="243.7" y="643.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="246.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.04%)</title><rect x="243.7" y="627.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.7" y="638.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.hashCode (2 samples, 0.04%)</title><rect x="243.7" y="611.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashSet.add (7 samples, 0.14%)</title><rect x="244.2" y="643.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 0.14%)</title><rect x="244.2" y="627.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.12%)</title><rect x="244.4" y="611.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="247.4" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.04%)</title><rect x="244.4" y="595.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.4" y="606.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.08%)</title><rect x="244.8" y="595.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="247.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.08%)</title><rect x="245.8" y="643.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="248.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.08%)</title><rect x="245.8" y="627.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="246.2" y="611.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.2" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="246.2" y="595.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (15 samples, 0.29%)</title><rect x="246.7" y="643.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (13 samples, 0.25%)</title><rect x="247.2" y="627.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.lazySetNext (5 samples, 0.10%)</title><rect x="247.2" y="611.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.casHead (8 samples, 0.16%)</title><rect x="248.3" y="611.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.3" y="622.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/ScheduledFutureTask.run (9 samples, 0.18%)</title><rect x="250.4" y="675.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="253.4" y="686.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/PromiseTask.runTask (9 samples, 0.18%)</title><rect x="250.4" y="659.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="253.4" y="670.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/DefaultWriteCoalescer$Flusher$$Lambda$184/1576230330.run (8 samples, 0.16%)</title><rect x="250.4" y="643.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.4" y="654.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/DefaultWriteCoalescer$Flusher.runOnEventLoop (8 samples, 0.16%)</title><rect x="250.4" y="627.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.4" y="638.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.flush (4 samples, 0.08%)</title><rect x="250.4" y="611.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.4" y="622.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.flush (4 samples, 0.08%)</title><rect x="250.4" y="595.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.4" y="606.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (4 samples, 0.08%)</title><rect x="250.4" y="579.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.4" y="590.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (4 samples, 0.08%)</title><rect x="250.4" y="563.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.4" y="574.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (4 samples, 0.08%)</title><rect x="250.4" y="547.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.4" y="558.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.flush (4 samples, 0.08%)</title><rect x="250.4" y="531.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="253.4" y="542.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush (4 samples, 0.08%)</title><rect x="250.4" y="515.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.4" y="526.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe.flush0 (4 samples, 0.08%)</title><rect x="250.4" y="499.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="253.4" y="510.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush0 (4 samples, 0.08%)</title><rect x="250.4" y="483.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.4" y="494.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.doWrite (4 samples, 0.08%)</title><rect x="250.4" y="467.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.4" y="478.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.nioBuffers (2 samples, 0.04%)</title><rect x="250.4" y="451.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.4" y="462.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.nioBuffers (2 samples, 0.04%)</title><rect x="250.4" y="435.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.4" y="446.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf.nioBuffers (2 samples, 0.04%)</title><rect x="250.4" y="419.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="253.4" y="430.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf.nioBuffers (2 samples, 0.04%)</title><rect x="250.4" y="403.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.4" y="414.0"></text>
</g>
<g>
<title>io/netty/util/internal/RecyclableArrayList.newInstance (2 samples, 0.04%)</title><rect x="250.4" y="387.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.4" y="398.0"></text>
</g>
<g>
<title>io/netty/util/internal/ObjectPool$RecyclerObjectPool.get (2 samples, 0.04%)</title><rect x="250.4" y="371.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.4" y="382.0"></text>
</g>
<g>
<title>io/netty/util/Recycler.get (2 samples, 0.04%)</title><rect x="250.4" y="355.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.4" y="366.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.write (4 samples, 0.08%)</title><rect x="251.3" y="611.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.3" y="622.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.write (4 samples, 0.08%)</title><rect x="251.3" y="595.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.3" y="606.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (4 samples, 0.08%)</title><rect x="251.3" y="579.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.3" y="590.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (4 samples, 0.08%)</title><rect x="251.3" y="563.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.3" y="574.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (4 samples, 0.08%)</title><rect x="251.3" y="547.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.3" y="558.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (4 samples, 0.08%)</title><rect x="251.3" y="531.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.3" y="542.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/InFlightHandler.write (4 samples, 0.08%)</title><rect x="251.3" y="515.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.3" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/InFlightHandler.write (4 samples, 0.08%)</title><rect x="251.3" y="499.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.3" y="510.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (4 samples, 0.08%)</title><rect x="251.3" y="483.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.3" y="494.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (4 samples, 0.08%)</title><rect x="251.3" y="467.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.3" y="478.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (4 samples, 0.08%)</title><rect x="251.3" y="451.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="254.3" y="462.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (4 samples, 0.08%)</title><rect x="251.3" y="435.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.3" y="446.0"></text>
</g>
<g>
<title>io/netty/handler/timeout/IdleStateHandler.write (4 samples, 0.08%)</title><rect x="251.3" y="419.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.3" y="430.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (4 samples, 0.08%)</title><rect x="251.3" y="403.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.3" y="414.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (4 samples, 0.08%)</title><rect x="251.3" y="387.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.3" y="398.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (4 samples, 0.08%)</title><rect x="251.3" y="371.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.3" y="382.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (4 samples, 0.08%)</title><rect x="251.3" y="355.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.3" y="366.0"></text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageEncoder.write (4 samples, 0.08%)</title><rect x="251.3" y="339.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.3" y="350.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/FrameEncoder.encode (4 samples, 0.08%)</title><rect x="251.3" y="323.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.3" y="334.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/protocol/FrameEncoder.encode (4 samples, 0.08%)</title><rect x="251.3" y="307.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="254.3" y="318.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/FrameCodec.encode (4 samples, 0.08%)</title><rect x="251.3" y="291.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.3" y="302.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/FrameCodec.encodeBodyInto (2 samples, 0.04%)</title><rect x="251.8" y="275.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.8" y="286.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/request/Execute$Codec.encode (2 samples, 0.04%)</title><rect x="251.8" y="259.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.8" y="270.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.fetchFromScheduledTaskQueue (19 samples, 0.37%)</title><rect x="252.5" y="691.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.5" y="702.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.14%)</title><rect x="253.4" y="675.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="256.4" y="686.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.12%)</title><rect x="253.6" y="659.0" width="1.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="256.6" y="670.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/AbstractScheduledEventExecutor.pollScheduledTask (7 samples, 0.14%)</title><rect x="255.0" y="675.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="258.0" y="686.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.pollTask (5 samples, 0.10%)</title><rect x="256.8" y="691.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.8" y="702.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.pollTaskFrom (5 samples, 0.10%)</title><rect x="256.8" y="675.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="259.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,916 samples, 76.56%)</title><rect x="258.2" y="771.0" width="903.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.2" y="782.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,916 samples, 76.56%)</title><rect x="258.2" y="755.0" width="903.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="261.2" y="766.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>clojure/lang/AFn.run (3,912 samples, 76.48%)</title><rect x="258.2" y="739.0" width="902.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.2" y="750.0">clojure/lang/AFn.run</text>
</g>
<g>
<title>clojure/core/async$thread_call$fn__6246.invoke (3,912 samples, 76.48%)</title><rect x="258.2" y="723.0" width="902.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.2" y="734.0">clojure/core/async$thread_call$fn__6246.invoke</text>
</g>
<g>
<title>hammer/core$_main$fn__8888.invoke (3,912 samples, 76.48%)</title><rect x="258.2" y="707.0" width="902.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.2" y="718.0">hammer/core$_main$fn__8888.invoke</text>
</g>
<g>
<title>hammer/core$insertTaskOneSession.invoke (3,912 samples, 76.48%)</title><rect x="258.2" y="691.0" width="902.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.2" y="702.0">hammer/core$insertTaskOneSession.invoke</text>
</g>
<g>
<title>hammer/core$insertTaskOneSession.invokeStatic (3,912 samples, 76.48%)</title><rect x="258.2" y="675.0" width="902.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.2" y="686.0">hammer/core$insertTaskOneSession.invokeStatic</text>
</g>
<g>
<title>hammer/core$insertTaskOneSession$fn__8879.invoke (3,912 samples, 76.48%)</title><rect x="258.2" y="659.0" width="902.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.2" y="670.0">hammer/core$insertTaskOneSession$fn__8879.invoke</text>
</g>
<g>
<title>clock_gettime (10 samples, 0.20%)</title><rect x="261.0" y="643.0" width="2.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="264.0" y="654.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.06%)</title><rect x="262.6" y="627.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="265.6" y="638.0"></text>
</g>
<g>
<title>clojure/lang/RT.classForName (182 samples, 3.56%)</title><rect x="263.3" y="643.0" width="42.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.3" y="654.0">clo..</text>
</g>
<g>
<title>clojure/lang/RT.baseLoader (12 samples, 0.23%)</title><rect x="263.3" y="627.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="266.3" y="638.0"></text>
</g>
<g>
<title>clojure/lang/Var.isBound (11 samples, 0.22%)</title><rect x="263.3" y="611.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.3" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.08%)</title><rect x="264.9" y="595.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.9" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.08%)</title><rect x="264.9" y="579.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.9" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.08%)</title><rect x="264.9" y="563.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.9" y="574.0"></text>
</g>
<g>
<title>clojure/lang/RT.classForName (170 samples, 3.32%)</title><rect x="266.1" y="627.0" width="39.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="269.1" y="638.0">clo..</text>
</g>
<g>
<title>clock_gettime (3 samples, 0.06%)</title><rect x="267.0" y="611.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="270.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Class.forName (163 samples, 3.19%)</title><rect x="267.7" y="611.0" width="37.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.7" y="622.0">jav..</text>
</g>
<g>
<title>java/lang/Class.forName0 (163 samples, 3.19%)</title><rect x="267.7" y="595.0" width="37.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.7" y="606.0">jav..</text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (143 samples, 2.80%)</title><rect x="268.1" y="579.0" width="33.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="271.1" y="590.0">Ja..</text>
</g>
<g>
<title>JVM_FindClassFromCaller (89 samples, 1.74%)</title><rect x="269.1" y="563.0" width="20.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="272.1" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::initialize(Thread*) (2 samples, 0.04%)</title><rect x="269.3" y="547.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="272.3" y="558.0"></text>
</g>
<g>
<title>Symbol::equals(char const*, int) const (5 samples, 0.10%)</title><rect x="270.0" y="547.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="273.0" y="558.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (28 samples, 0.55%)</title><rect x="271.1" y="547.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="274.1" y="558.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (2 samples, 0.04%)</title><rect x="277.6" y="547.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="280.6" y="558.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (48 samples, 0.94%)</title><rect x="278.5" y="547.0" width="11.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="281.5" y="558.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (44 samples, 0.86%)</title><rect x="279.2" y="531.0" width="10.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="282.2" y="542.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (39 samples, 0.76%)</title><rect x="279.5" y="515.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="282.5" y="526.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (26 samples, 0.51%)</title><rect x="280.4" y="499.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="283.4" y="510.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::non_reflection_class_loader(oopDesc*) (9 samples, 0.18%)</title><rect x="286.4" y="499.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="289.4" y="510.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::loader_data(oopDesc*) (2 samples, 0.04%)</title><rect x="288.4" y="515.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="291.4" y="526.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::non_reflection_class_loader(oopDesc*) (2 samples, 0.04%)</title><rect x="288.9" y="515.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="291.9" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.237] (3 samples, 0.06%)</title><rect x="289.8" y="563.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="292.8" y="574.0"></text>
</g>
<g>
<title>VerifyClassname (5 samples, 0.10%)</title><rect x="290.5" y="563.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="293.5" y="574.0"></text>
</g>
<g>
<title>skip_over_fieldname.constprop.2 (4 samples, 0.08%)</title><rect x="290.8" y="547.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="293.8" y="558.0"></text>
</g>
<g>
<title>VerifyFixClassname (2 samples, 0.04%)</title><rect x="291.7" y="563.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="294.7" y="574.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (3 samples, 0.06%)</title><rect x="292.1" y="563.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="295.1" y="574.0"></text>
</g>
<g>
<title>__strlen_sse2_pminub (11 samples, 0.22%)</title><rect x="292.8" y="563.0" width="2.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="295.8" y="574.0"></text>
</g>
<g>
<title>jni_GetStringUTFLength (7 samples, 0.14%)</title><rect x="295.4" y="563.0" width="1.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="298.4" y="574.0"></text>
</g>
<g>
<title>java_lang_String::utf8_length(oopDesc*) (4 samples, 0.08%)</title><rect x="296.1" y="547.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="299.1" y="558.0"></text>
</g>
<g>
<title>jni_GetStringUTFRegion (12 samples, 0.23%)</title><rect x="297.0" y="563.0" width="2.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="300.0" y="574.0"></text>
</g>
<g>
<title>UNICODE::as_utf8(unsigned short*, int) (9 samples, 0.18%)</title><rect x="297.7" y="547.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="300.7" y="558.0"></text>
</g>
<g>
<title>memcpy@plt (2 samples, 0.04%)</title><rect x="299.8" y="563.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="302.8" y="574.0"></text>
</g>
<g>
<title>next_utf2unicode (3 samples, 0.06%)</title><rect x="300.2" y="563.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="303.2" y="574.0"></text>
</g>
<g>
<title>VerifyClassname (2 samples, 0.04%)</title><rect x="301.1" y="579.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="304.1" y="590.0"></text>
</g>
<g>
<title>VerifyFixClassname (6 samples, 0.12%)</title><rect x="301.8" y="579.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="304.8" y="590.0"></text>
</g>
<g>
<title>jni_GetStringUTFLength (2 samples, 0.04%)</title><rect x="303.2" y="579.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="306.2" y="590.0"></text>
</g>
<g>
<title>jni_GetStringUTFRegion (7 samples, 0.14%)</title><rect x="303.7" y="579.0" width="1.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="306.7" y="590.0"></text>
</g>
<g>
<title>clojure/lang/Reflector.invokeMatchingMethod (3 samples, 0.06%)</title><rect x="305.3" y="643.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="308.3" y="654.0"></text>
</g>
<g>
<title>clojure/lang/Reflector.invokeStaticMethod (467 samples, 9.13%)</title><rect x="306.0" y="643.0" width="107.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="309.0" y="654.0">clojure/lang/..</text>
</g>
<g>
<title>clojure/lang/Reflector.getMethods (425 samples, 8.31%)</title><rect x="306.0" y="627.0" width="98.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.0" y="638.0">clojure/lang..</text>
</g>
<g>
<title>java/lang/Class.getMethods (341 samples, 6.67%)</title><rect x="323.7" y="611.0" width="78.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.7" y="622.0">java/lang..</text>
</g>
<g>
<title>java/lang/Class.checkMemberAccess (3 samples, 0.06%)</title><rect x="324.0" y="595.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="327.0" y="606.0"></text>
</g>
<g>
<title>java/lang/Class.copyMethods (331 samples, 6.47%)</title><rect x="324.7" y="595.0" width="76.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="327.7" y="606.0">java/lan..</text>
</g>
<g>
<title>java/lang/reflect/Method.copy (9 samples, 0.18%)</title><rect x="327.9" y="579.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="330.9" y="590.0"></text>
</g>
<g>
<title>sun/reflect/ReflectionFactory.copyMethod (308 samples, 6.02%)</title><rect x="330.0" y="579.0" width="71.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="333.0" y="590.0">sun/refl..</text>
</g>
<g>
<title>java/lang/reflect/ReflectAccess.copyMethod (298 samples, 5.83%)</title><rect x="330.4" y="563.0" width="68.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="333.4" y="574.0">java/la..</text>
</g>
<g>
<title>java/lang/reflect/Method.copy (294 samples, 5.75%)</title><rect x="331.4" y="547.0" width="67.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="334.4" y="558.0">java/la..</text>
</g>
<g>
<title>java/lang/reflect/Method.&lt;init&gt; (199 samples, 3.89%)</title><rect x="353.3" y="531.0" width="45.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="356.3" y="542.0">java..</text>
</g>
<g>
<title>sun/reflect/ReflectionFactory.langReflectAccess (8 samples, 0.16%)</title><rect x="399.2" y="563.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="402.2" y="574.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetPublicMethods (6 samples, 0.12%)</title><rect x="401.0" y="595.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.0" y="606.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (5 samples, 0.10%)</title><rect x="401.3" y="579.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="404.3" y="590.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (2 samples, 0.04%)</title><rect x="401.9" y="563.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="404.9" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.isBridge (2 samples, 0.04%)</title><rect x="402.6" y="611.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="405.6" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.04%)</title><rect x="403.1" y="611.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="406.1" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.04%)</title><rect x="403.6" y="611.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="406.6" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (2 samples, 0.04%)</title><rect x="403.6" y="595.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.6" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (2 samples, 0.04%)</title><rect x="403.6" y="579.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="406.6" y="590.0"></text>
</g>
<g>
<title>clojure/lang/Reflector.invokeMatchingMethod (42 samples, 0.82%)</title><rect x="404.0" y="627.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.0" y="638.0"></text>
</g>
<g>
<title>clojure/lang/Reflector.boxArgs (2 samples, 0.04%)</title><rect x="404.5" y="611.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="407.5" y="622.0"></text>
</g>
<g>
<title>clojure/lang/Reflector.isCongruent (22 samples, 0.43%)</title><rect x="404.9" y="611.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.9" y="622.0"></text>
</g>
<g>
<title>clojure/lang/Reflector.paramArgTypeMatch (7 samples, 0.14%)</title><rect x="408.4" y="595.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="411.4" y="606.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.getParameterTypes (4 samples, 0.08%)</title><rect x="410.3" y="611.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.3" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (6 samples, 0.12%)</title><rect x="411.2" y="611.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="414.2" y="622.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingMethodAccessorImpl.invoke (6 samples, 0.12%)</title><rect x="411.2" y="595.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="414.2" y="606.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedMethodAccessor3.invoke (5 samples, 0.10%)</title><rect x="411.4" y="579.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.4" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="413.0" y="611.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="416.0" y="622.0"></text>
</g>
<g>
<title>clojure/lang/Var.get (5 samples, 0.10%)</title><rect x="413.9" y="643.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="416.9" y="654.0"></text>
</g>
<g>
<title>clojure/lang/Var.deref (5 samples, 0.10%)</title><rect x="413.9" y="627.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="416.9" y="638.0"></text>
</g>
<g>
<title>clojure/lang/Var.getThreadBinding (4 samples, 0.08%)</title><rect x="414.2" y="611.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="417.2" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.06%)</title><rect x="414.4" y="595.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="417.4" y="606.0"></text>
</g>
<g>
<title>hammer/core$insertIntoTable0.invoke (1,424 samples, 27.84%)</title><rect x="415.1" y="643.0" width="328.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="418.1" y="654.0">hammer/core$insertIntoTable0.invoke</text>
</g>
<g>
<title>hammer/core$insertIntoTable0.invokeStatic (1,424 samples, 27.84%)</title><rect x="415.1" y="627.0" width="328.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="418.1" y="638.0">hammer/core$insertIntoTable0.invokeStatic</text>
</g>
<g>
<title>clojure/core$into_array.invoke (35 samples, 0.68%)</title><rect x="416.0" y="611.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="419.0" y="622.0"></text>
</g>
<g>
<title>clojure/core$into_array.invokeStatic (35 samples, 0.68%)</title><rect x="416.0" y="595.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.0" y="606.0"></text>
</g>
<g>
<title>clojure/core$seq__5402.invokeStatic (10 samples, 0.20%)</title><rect x="416.0" y="579.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.0" y="590.0"></text>
</g>
<g>
<title>clojure/lang/RT.seq (10 samples, 0.20%)</title><rect x="416.0" y="563.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="419.0" y="574.0"></text>
</g>
<g>
<title>clojure/lang/LazySeq.seq (7 samples, 0.14%)</title><rect x="416.0" y="547.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="419.0" y="558.0"></text>
</g>
<g>
<title>clojure/lang/RT.seq (7 samples, 0.14%)</title><rect x="416.0" y="531.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="419.0" y="542.0"></text>
</g>
<g>
<title>clojure/lang/LazySeq.seq (7 samples, 0.14%)</title><rect x="416.0" y="515.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="419.0" y="526.0"></text>
</g>
<g>
<title>clojure/lang/PersistentVector.seq (3 samples, 0.06%)</title><rect x="416.0" y="499.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="419.0" y="510.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.08%)</title><rect x="416.7" y="499.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="419.7" y="510.0"></text>
</g>
<g>
<title>clojure/lang/RT.seqFrom (3 samples, 0.06%)</title><rect x="417.6" y="547.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="420.6" y="558.0"></text>
</g>
<g>
<title>clojure/lang/PersistentVector.seq (3 samples, 0.06%)</title><rect x="417.6" y="531.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="420.6" y="542.0"></text>
</g>
<g>
<title>clojure/lang/PersistentVector.chunkedSeq (3 samples, 0.06%)</title><rect x="417.6" y="515.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="420.6" y="526.0"></text>
</g>
<g>
<title>clojure/lang/PersistentVector$ChunkedSeq.&lt;init&gt; (3 samples, 0.06%)</title><rect x="417.6" y="499.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="420.6" y="510.0"></text>
</g>
<g>
<title>clojure/lang/ASeq.&lt;init&gt; (3 samples, 0.06%)</title><rect x="417.6" y="483.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.6" y="494.0"></text>
</g>
<g>
<title>clojure/lang/RT.seqToTypedArray (25 samples, 0.49%)</title><rect x="418.3" y="579.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="421.3" y="590.0"></text>
</g>
<g>
<title>clojure/lang/RT.length (4 samples, 0.08%)</title><rect x="418.6" y="563.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="421.6" y="574.0"></text>
</g>
<g>
<title>clojure/lang/PersistentVector$ChunkedSeq.next (4 samples, 0.08%)</title><rect x="418.6" y="547.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="421.6" y="558.0"></text>
</g>
<g>
<title>clojure/lang/PersistentVector$ChunkedSeq.&lt;init&gt; (3 samples, 0.06%)</title><rect x="418.8" y="531.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="421.8" y="542.0"></text>
</g>
<g>
<title>clojure/lang/ASeq.&lt;init&gt; (2 samples, 0.04%)</title><rect x="419.0" y="515.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="422.0" y="526.0"></text>
</g>
<g>
<title>clojure/lang/Obj.&lt;init&gt; (2 samples, 0.04%)</title><rect x="419.0" y="499.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="422.0" y="510.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.set (20 samples, 0.39%)</title><rect x="419.5" y="563.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="422.5" y="574.0"></text>
</g>
<g>
<title>JVM_SetArrayElement (12 samples, 0.23%)</title><rect x="420.4" y="547.0" width="2.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="423.4" y="558.0"></text>
</g>
<g>
<title>Reflection::array_set(jvalue*, arrayOopDesc*, int, BasicType, Thread*) (5 samples, 0.10%)</title><rect x="421.6" y="531.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="424.6" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.318] (3 samples, 0.06%)</title><rect x="423.4" y="547.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="426.4" y="558.0"></text>
</g>
<g>
<title>clojure/lang/Reflector.invokeInstanceMethod (228 samples, 4.46%)</title><rect x="424.3" y="611.0" width="52.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="427.3" y="622.0">cloju..</text>
</g>
<g>
<title>clojure/lang/Reflector.getMethods (108 samples, 2.11%)</title><rect x="425.2" y="595.0" width="25.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="428.2" y="606.0">c..</text>
</g>
<g>
<title>java/lang/Class.getMethods (90 samples, 1.76%)</title><rect x="428.7" y="579.0" width="20.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="431.7" y="590.0"></text>
</g>
<g>
<title>java/lang/Class.copyMethods (88 samples, 1.72%)</title><rect x="428.7" y="563.0" width="20.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="431.7" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.copy (2 samples, 0.04%)</title><rect x="429.6" y="547.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.6" y="558.0"></text>
</g>
<g>
<title>sun/reflect/ReflectionFactory.copyMethod (82 samples, 1.60%)</title><rect x="430.1" y="547.0" width="18.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="433.1" y="558.0"></text>
</g>
<g>
<title>java/lang/reflect/ReflectAccess.copyMethod (78 samples, 1.52%)</title><rect x="430.3" y="531.0" width="18.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="433.3" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.copy (78 samples, 1.52%)</title><rect x="430.3" y="515.0" width="18.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="433.3" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.04%)</title><rect x="434.2" y="499.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="437.2" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.04%)</title><rect x="434.2" y="483.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="437.2" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.04%)</title><rect x="434.2" y="467.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="437.2" y="478.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.&lt;init&gt; (59 samples, 1.15%)</title><rect x="434.7" y="499.0" width="13.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="437.7" y="510.0"></text>
</g>
<g>
<title>sun/reflect/ReflectionFactory.langReflectAccess (3 samples, 0.06%)</title><rect x="448.3" y="531.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="451.3" y="542.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetPublicMethods (2 samples, 0.04%)</title><rect x="449.0" y="563.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="452.0" y="574.0"></text>
</g>
<g>
<title>clojure/lang/Reflector.invokeMatchingMethod (93 samples, 1.82%)</title><rect x="450.2" y="595.0" width="21.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="453.2" y="606.0">c..</text>
</g>
<g>
<title>clojure/lang/Reflector.isCongruent (2 samples, 0.04%)</title><rect x="450.4" y="579.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="453.4" y="590.0"></text>
</g>
<g>
<title>clojure/lang/Reflector.paramArgTypeMatch (2 samples, 0.04%)</title><rect x="450.4" y="563.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="453.4" y="574.0"></text>
</g>
<g>
<title>clojure/lang/Reflector.prepRet (2 samples, 0.04%)</title><rect x="450.9" y="579.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="453.9" y="590.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedMethodAccessor4.invoke (2 samples, 0.04%)</title><rect x="450.9" y="563.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="453.9" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (87 samples, 1.70%)</title><rect x="451.3" y="579.0" width="20.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="454.3" y="590.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingMethodAccessorImpl.invoke (87 samples, 1.70%)</title><rect x="451.3" y="563.0" width="20.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="454.3" y="574.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedMethodAccessor4.invoke (87 samples, 1.70%)</title><rect x="451.3" y="547.0" width="20.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="454.3" y="558.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/api/core/cql/SyncCqlSession.prepare (87 samples, 1.70%)</title><rect x="451.3" y="531.0" width="20.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="454.3" y="542.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/session/DefaultSession.execute (87 samples, 1.70%)</title><rect x="451.3" y="515.0" width="20.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="454.3" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlPrepareSyncProcessor.process (68 samples, 1.33%)</title><rect x="451.3" y="499.0" width="15.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="454.3" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlPrepareSyncProcessor.process (68 samples, 1.33%)</title><rect x="451.3" y="483.0" width="15.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="454.3" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlPrepareAsyncProcessor.process (68 samples, 1.33%)</title><rect x="451.3" y="467.0" width="15.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="454.3" y="478.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/cache/LocalCache$LocalManualCache.get (2 samples, 0.04%)</title><rect x="451.3" y="451.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="454.3" y="462.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/cache/LocalCache$LocalManualCache$1.&lt;init&gt; (2 samples, 0.04%)</title><rect x="451.3" y="435.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="454.3" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/cache/LocalCache$LocalManualCache.getIfPresent (65 samples, 1.27%)</title><rect x="451.8" y="451.0" width="15.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="454.8" y="462.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/session/RequestProcessorRegistry.processorFor (3 samples, 0.06%)</title><rect x="451.8" y="435.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="454.8" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/cache/LocalCache.getIfPresent (62 samples, 1.21%)</title><rect x="452.5" y="435.0" width="14.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="455.5" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/cache/LocalCache$Segment.get (11 samples, 0.22%)</title><rect x="452.5" y="419.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="455.5" y="430.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/cache/LocalCache$Segment.getLiveEntry (6 samples, 0.12%)</title><rect x="452.5" y="403.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="455.5" y="414.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/base/Equivalence$Equals.doHash (2 samples, 0.04%)</title><rect x="452.5" y="387.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.5" y="398.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/cache/LocalCache$Segment.getEntry (4 samples, 0.08%)</title><rect x="452.9" y="387.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="455.9" y="398.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/cache/LocalCache$Segment.getFirst (2 samples, 0.04%)</title><rect x="453.4" y="371.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="456.4" y="382.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/cache/LocalCache$Segment.postReadCleanup (2 samples, 0.04%)</title><rect x="453.9" y="403.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="456.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.getRaw (3 samples, 0.06%)</title><rect x="454.3" y="403.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.3" y="414.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/cache/LocalCache.hash (51 samples, 1.00%)</title><rect x="455.0" y="419.0" width="11.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="458.0" y="430.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/base/Equivalence.hash (51 samples, 1.00%)</title><rect x="455.0" y="403.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="458.0" y="414.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/base/Equivalence$Equals.doHash (51 samples, 1.00%)</title><rect x="455.0" y="387.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="458.0" y="398.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/DefaultPrepareRequest.hashCode (30 samples, 0.59%)</title><rect x="455.0" y="371.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="458.0" y="382.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/DefaultSimpleStatement.hashCode (30 samples, 0.59%)</title><rect x="455.0" y="355.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="458.0" y="366.0"></text>
</g>
<g>
<title>java/util/Objects.hash (26 samples, 0.51%)</title><rect x="455.9" y="339.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="458.9" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (26 samples, 0.51%)</title><rect x="455.9" y="323.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="458.9" y="334.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.04%)</title><rect x="458.5" y="307.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="461.5" y="318.0"></text>
</g>
<g>
<title>java/util/AbstractList.hashCode (11 samples, 0.22%)</title><rect x="458.9" y="307.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="461.9" y="318.0"></text>
</g>
<g>
<title>java/util/AbstractList$Itr.hasNext (5 samples, 0.10%)</title><rect x="458.9" y="291.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="461.9" y="302.0"></text>
</g>
<g>
<title>com/datastax/oss/protocol/internal/util/collection/NullAllowingImmutableList.size (3 samples, 0.06%)</title><rect x="459.2" y="275.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="462.2" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractList.iterator (6 samples, 0.12%)</title><rect x="460.1" y="291.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="463.1" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractMap.hashCode (2 samples, 0.04%)</title><rect x="461.5" y="307.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="464.5" y="318.0"></text>
</g>
<g>
<title>java/lang/Boolean.hashCode (2 samples, 0.04%)</title><rect x="461.9" y="371.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="464.9" y="382.0"></text>
</g>
<g>
<title>java/lang/Long.hashCode (8 samples, 0.16%)</title><rect x="462.6" y="371.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="465.6" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.04%)</title><rect x="464.5" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="467.5" y="382.0"></text>
</g>
<g>
<title>java/util/AbstractList.hashCode (2 samples, 0.04%)</title><rect x="464.9" y="371.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="467.9" y="382.0"></text>
</g>
<g>
<title>java/util/AbstractMap.hashCode (5 samples, 0.10%)</title><rect x="465.4" y="371.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="468.4" y="382.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/session/RequestProcessorRegistry.processorFor (19 samples, 0.37%)</title><rect x="467.0" y="499.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="470.0" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlPrepareAsyncProcessor.canProcess (5 samples, 0.10%)</title><rect x="467.5" y="483.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.5" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestAsyncProcessor.canProcess (3 samples, 0.06%)</title><rect x="468.6" y="483.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="471.6" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestSyncProcessor.canProcess (3 samples, 0.06%)</title><rect x="469.3" y="483.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="472.3" y="494.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.12%)</title><rect x="470.0" y="483.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="473.0" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/854487022.linkToTargetMethod (3 samples, 0.06%)</title><rect x="471.6" y="595.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="474.6" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1896277646.invokeStatic_L_L (3 samples, 0.06%)</title><rect x="471.6" y="579.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="474.6" y="590.0"></text>
</g>
<g>
<title>clojure/lang/Reflector$$Lambda$5/1432536094.get$Lambda (3 samples, 0.06%)</title><rect x="471.6" y="563.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="474.6" y="574.0"></text>
</g>
<g>
<title>clojure/lang/Reflector$$Lambda$5/1432536094.&lt;init&gt; (3 samples, 0.06%)</title><rect x="471.6" y="547.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="474.6" y="558.0"></text>
</g>
<g>
<title>java/util/Collection.stream (6 samples, 0.12%)</title><rect x="472.3" y="595.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="475.3" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (6 samples, 0.12%)</title><rect x="472.3" y="579.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="475.3" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (5 samples, 0.10%)</title><rect x="472.5" y="563.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.5" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (5 samples, 0.10%)</title><rect x="472.5" y="547.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="475.5" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (5 samples, 0.10%)</title><rect x="472.5" y="531.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="475.5" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (12 samples, 0.23%)</title><rect x="473.7" y="595.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="476.7" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (6 samples, 0.12%)</title><rect x="473.7" y="579.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="476.7" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (6 samples, 0.12%)</title><rect x="473.7" y="563.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="476.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (6 samples, 0.12%)</title><rect x="473.7" y="547.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="476.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (6 samples, 0.12%)</title><rect x="473.7" y="531.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="476.7" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (6 samples, 0.12%)</title><rect x="473.7" y="515.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="476.7" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (4 samples, 0.08%)</title><rect x="474.2" y="499.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="477.2" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps.makeRef (6 samples, 0.12%)</title><rect x="475.1" y="579.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="478.1" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.&lt;init&gt; (6 samples, 0.12%)</title><rect x="475.1" y="563.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="478.1" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (2 samples, 0.04%)</title><rect x="476.5" y="595.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.5" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (2 samples, 0.04%)</title><rect x="476.5" y="579.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="479.5" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (2 samples, 0.04%)</title><rect x="476.5" y="563.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="479.5" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (2 samples, 0.04%)</title><rect x="476.5" y="547.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="479.5" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (2 samples, 0.04%)</title><rect x="476.5" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="479.5" y="542.0"></text>
</g>
<g>
<title>clojure/lang/Tuple.create (11 samples, 0.22%)</title><rect x="476.9" y="611.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="479.9" y="622.0"></text>
</g>
<g>
<title>clojure/lang/PersistentVector$ChunkedSeq.next (4 samples, 0.08%)</title><rect x="476.9" y="595.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="479.9" y="606.0"></text>
</g>
<g>
<title>clojure/lang/RT.vector (3 samples, 0.06%)</title><rect x="477.8" y="595.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="480.8" y="606.0"></text>
</g>
<g>
<title>clojure/lang/LazilyPersistentVector.createOwning (3 samples, 0.06%)</title><rect x="477.8" y="579.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="480.8" y="590.0"></text>
</g>
<g>
<title>clojure/lang/PersistentVector.&lt;init&gt; (3 samples, 0.06%)</title><rect x="477.8" y="563.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.8" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.set (4 samples, 0.08%)</title><rect x="478.5" y="595.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="481.5" y="606.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/api/core/cql/SyncCqlSession.execute (438 samples, 8.56%)</title><rect x="479.5" y="611.0" width="101.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="482.5" y="622.0">com/datastax..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/session/DefaultSession.execute (438 samples, 8.56%)</title><rect x="479.5" y="595.0" width="101.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="482.5" y="606.0">com/datastax..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlPrepareSyncProcessor.process (8 samples, 0.16%)</title><rect x="479.5" y="579.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="482.5" y="590.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlPrepareSyncProcessor.process (8 samples, 0.16%)</title><rect x="479.5" y="563.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="482.5" y="574.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlPrepareAsyncProcessor.process (8 samples, 0.16%)</title><rect x="479.5" y="547.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="482.5" y="558.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/cache/LocalCache$LocalManualCache.getIfPresent (6 samples, 0.12%)</title><rect x="479.9" y="531.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="482.9" y="542.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/cache/LocalCache.getIfPresent (6 samples, 0.12%)</title><rect x="479.9" y="515.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="482.9" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/cache/LocalCache$Segment.get (2 samples, 0.04%)</title><rect x="479.9" y="499.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="482.9" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/cache/LocalCache.segmentFor (4 samples, 0.08%)</title><rect x="480.4" y="499.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="483.4" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestSyncProcessor.process (424 samples, 8.29%)</title><rect x="481.3" y="579.0" width="97.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="484.3" y="590.0">com/datasta..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestSyncProcessor.process (424 samples, 8.29%)</title><rect x="481.3" y="563.0" width="97.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="484.3" y="574.0">com/datasta..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestAsyncProcessor.process (228 samples, 4.46%)</title><rect x="481.3" y="547.0" width="52.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="484.3" y="558.0">com/d..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler.&lt;init&gt; (227 samples, 4.44%)</title><rect x="481.5" y="531.0" width="52.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="484.5" y="542.0">com/d..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/context/DefaultDriverContext.getNettyOptions (5 samples, 0.10%)</title><rect x="484.1" y="515.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="487.1" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/concurrent/LazyReference.get (5 samples, 0.10%)</title><rect x="484.1" y="499.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="487.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="484.5" y="483.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="487.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (2 samples, 0.04%)</title><rect x="484.5" y="467.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="487.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.04%)</title><rect x="484.5" y="451.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="487.5" y="462.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="484.5" y="435.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="487.5" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/context/DefaultDriverContext.getRequestTracker (2 samples, 0.04%)</title><rect x="485.2" y="515.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="488.2" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/concurrent/LazyReference.get (2 samples, 0.04%)</title><rect x="485.2" y="499.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="488.2" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/Conversions.resolveExecutionProfile (15 samples, 0.29%)</title><rect x="485.7" y="515.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="488.7" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/api/core/config/DriverConfig.getDefaultProfile (15 samples, 0.29%)</title><rect x="485.7" y="499.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="488.7" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/config/typesafe/TypesafeDriverConfig.getProfile (15 samples, 0.29%)</title><rect x="485.7" y="483.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="488.7" y="494.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.06%)</title><rect x="487.1" y="467.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="490.1" y="478.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.04%)</title><rect x="487.3" y="451.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="490.3" y="462.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/api/core/context/DriverContext.getRetryPolicy (3 samples, 0.06%)</title><rect x="487.8" y="467.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="490.8" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="488.7" y="467.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="491.7" y="478.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/Conversions.toMessage (31 samples, 0.61%)</title><rect x="489.2" y="515.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="492.2" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/DefaultConsistencyLevelRegistry.nameToCode (2 samples, 0.04%)</title><rect x="489.4" y="499.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="492.4" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableMap.get (2 samples, 0.04%)</title><rect x="489.4" y="483.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="492.4" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableMap.get (2 samples, 0.04%)</title><rect x="489.4" y="467.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="492.4" y="478.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.04%)</title><rect x="489.4" y="451.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="492.4" y="462.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/config/typesafe/TypesafeDriverExecutionProfile.getInt (5 samples, 0.10%)</title><rect x="489.8" y="499.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="492.8" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/config/typesafe/TypesafeDriverExecutionProfile.getCached (5 samples, 0.10%)</title><rect x="489.8" y="483.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="492.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.computeIfAbsent (5 samples, 0.10%)</title><rect x="489.8" y="467.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="492.8" y="478.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/config/typesafe/TypesafeDriverExecutionProfile.getString (8 samples, 0.16%)</title><rect x="491.0" y="499.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="494.0" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/config/typesafe/TypesafeDriverExecutionProfile.getCached (7 samples, 0.14%)</title><rect x="491.2" y="483.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="494.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.computeIfAbsent (7 samples, 0.14%)</title><rect x="491.2" y="467.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="494.2" y="478.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/context/DefaultDriverContext.getConsistencyLevelRegistry (9 samples, 0.18%)</title><rect x="492.8" y="499.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="495.8" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/concurrent/LazyReference.get (7 samples, 0.14%)</title><rect x="493.3" y="483.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="496.3" y="494.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="494.0" y="467.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="497.0" y="478.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.04%)</title><rect x="494.0" y="451.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="497.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="494.5" y="467.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="497.5" y="478.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/context/DefaultDriverContext.getProtocolVersionRegistry (5 samples, 0.10%)</title><rect x="494.9" y="499.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="497.9" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/concurrent/LazyReference.get (5 samples, 0.10%)</title><rect x="494.9" y="483.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="497.9" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler.scheduleTimeout (12 samples, 0.23%)</title><rect x="496.3" y="515.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="499.3" y="526.0"></text>
</g>
<g>
<title>io/netty/util/HashedWheelTimer.newTimeout (11 samples, 0.22%)</title><rect x="496.3" y="499.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="499.3" y="510.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.06%)</title><rect x="496.8" y="483.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="499.8" y="494.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.04%)</title><rect x="497.0" y="467.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="500.0" y="478.0"></text>
</g>
<g>
<title>io/netty/util/HashedWheelTimer$HashedWheelTimeout.&lt;init&gt; (2 samples, 0.04%)</title><rect x="497.5" y="483.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="500.5" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.add (3 samples, 0.06%)</title><rect x="497.9" y="483.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="500.9" y="494.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscUnboundedArrayQueue.offer (3 samples, 0.06%)</title><rect x="497.9" y="467.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="500.9" y="478.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/BaseMpscLinkedArrayQueue.offer (3 samples, 0.06%)</title><rect x="497.9" y="451.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="500.9" y="462.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/session/throttling/PassThroughRequestThrottler.register (139 samples, 2.72%)</title><rect x="499.3" y="515.0" width="32.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="502.3" y="526.0">co..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler.onThrottleReady (139 samples, 2.72%)</title><rect x="499.3" y="499.0" width="32.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="502.3" y="510.0">co..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/context/DefaultDriverContext.getLoadBalancingPolicyWrapper (4 samples, 0.08%)</title><rect x="499.5" y="483.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="502.5" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/concurrent/LazyReference.get (3 samples, 0.06%)</title><rect x="499.8" y="467.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="502.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="500.0" y="451.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="503.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (2 samples, 0.04%)</title><rect x="500.0" y="435.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="503.0" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler.sendRequest (2 samples, 0.04%)</title><rect x="500.0" y="419.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="503.0" y="430.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler.sendRequest (56 samples, 1.09%)</title><rect x="500.5" y="483.0" width="12.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="503.5" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/DriverChannel.write (38 samples, 0.74%)</title><rect x="500.5" y="467.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.5" y="478.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/DefaultWriteCoalescer.writeAndFlush (33 samples, 0.65%)</title><rect x="501.4" y="451.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="504.4" y="462.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/DefaultWriteCoalescer.enqueue (31 samples, 0.61%)</title><rect x="501.4" y="435.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="504.4" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/DefaultWriteCoalescer$Flusher.access$100 (27 samples, 0.53%)</title><rect x="501.4" y="419.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="504.4" y="430.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/DefaultWriteCoalescer$Flusher.enqueue (27 samples, 0.53%)</title><rect x="501.4" y="403.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="504.4" y="414.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.execute (21 samples, 0.41%)</title><rect x="501.4" y="387.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="504.4" y="398.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.execute (20 samples, 0.39%)</title><rect x="501.6" y="371.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="504.6" y="382.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.wakeup (12 samples, 0.23%)</title><rect x="501.6" y="355.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="504.6" y="366.0"></text>
</g>
<g>
<title>io/netty/channel/nio/SelectedSelectionKeySetSelector.wakeup (11 samples, 0.22%)</title><rect x="501.8" y="339.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (11 samples, 0.22%)</title><rect x="501.8" y="323.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="504.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (8 samples, 0.16%)</title><rect x="502.5" y="307.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.interrupt (8 samples, 0.16%)</title><rect x="502.5" y="291.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="505.5" y="302.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_interrupt (3 samples, 0.06%)</title><rect x="502.5" y="275.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="505.5" y="286.0"></text>
</g>
<g>
<title>__write (3 samples, 0.06%)</title><rect x="503.5" y="275.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="506.5" y="286.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/AbstractEventExecutor.inEventLoop (5 samples, 0.10%)</title><rect x="504.4" y="355.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="507.4" y="366.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.addTask (2 samples, 0.04%)</title><rect x="505.5" y="355.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="508.5" y="366.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.offerTask (2 samples, 0.04%)</title><rect x="505.5" y="339.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="508.5" y="350.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscUnboundedArrayQueue.offer (2 samples, 0.04%)</title><rect x="505.5" y="323.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="508.5" y="334.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/BaseMpscLinkedArrayQueue.offer (2 samples, 0.04%)</title><rect x="505.5" y="307.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="508.5" y="318.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/BaseMpscLinkedArrayQueueProducerFields.casProducerIndex (2 samples, 0.04%)</title><rect x="505.5" y="291.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="508.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (6 samples, 0.12%)</title><rect x="506.2" y="387.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="509.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casNext (4 samples, 0.08%)</title><rect x="506.7" y="371.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="509.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.computeIfAbsent (3 samples, 0.06%)</title><rect x="507.8" y="419.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.8" y="430.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel.eventLoop (2 samples, 0.04%)</title><rect x="508.5" y="435.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="511.5" y="446.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel.eventLoop (2 samples, 0.04%)</title><rect x="508.5" y="419.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="511.5" y="430.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.eventLoop (2 samples, 0.04%)</title><rect x="508.5" y="403.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="511.5" y="414.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/DefaultWriteCoalescer$Write.&lt;init&gt; (2 samples, 0.04%)</title><rect x="508.5" y="387.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="511.5" y="398.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler$NodeResponseCallback.&lt;init&gt; (12 samples, 0.23%)</title><rect x="509.2" y="467.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="512.2" y="478.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestHandler$NodeResponseCallback.&lt;init&gt; (8 samples, 0.16%)</title><rect x="509.5" y="451.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="512.5" y="462.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.06%)</title><rect x="511.3" y="451.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="514.3" y="462.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/session/DefaultSession.getChannel (6 samples, 0.12%)</title><rect x="512.0" y="467.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="515.0" y="478.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/pool/ChannelPool.next (5 samples, 0.10%)</title><rect x="512.2" y="451.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="515.2" y="462.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/pool/ChannelSet.next (5 samples, 0.10%)</title><rect x="512.2" y="435.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="515.2" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/DriverChannel.preAcquireId (2 samples, 0.04%)</title><rect x="512.5" y="419.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="515.5" y="430.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/InFlightHandler.preAcquireId (2 samples, 0.04%)</title><rect x="512.5" y="403.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.5" y="414.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/channel/StreamIdGenerator.preAcquire (2 samples, 0.04%)</title><rect x="512.5" y="387.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="515.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.compareAndSet (2 samples, 0.04%)</title><rect x="512.5" y="371.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="515.5" y="382.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.addListener (2 samples, 0.04%)</title><rect x="512.9" y="419.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="515.9" y="430.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/metadata/LoadBalancingPolicyWrapper.newQueryPlan (78 samples, 1.52%)</title><rect x="513.4" y="483.0" width="18.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="516.4" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/loadbalancing/DefaultLoadBalancingPolicy.newQueryPlan (74 samples, 1.45%)</title><rect x="514.3" y="467.0" width="17.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="517.3" y="478.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/loadbalancing/BasicLoadBalancingPolicy.getReplicas (69 samples, 1.35%)</title><rect x="514.5" y="451.0" width="15.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="517.5" y="462.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/context/DefaultDriverContext.getMetadataManager (6 samples, 0.12%)</title><rect x="518.0" y="435.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="521.0" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/concurrent/LazyReference.get (6 samples, 0.12%)</title><rect x="518.0" y="419.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="521.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.08%)</title><rect x="518.4" y="403.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="521.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.08%)</title><rect x="518.4" y="387.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="521.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.08%)</title><rect x="518.4" y="371.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="521.4" y="382.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/DefaultBoundStatement.getRoutingKeyspace (12 samples, 0.23%)</title><rect x="519.6" y="435.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="522.6" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/DefaultColumnDefinitions.get (2 samples, 0.04%)</title><rect x="521.0" y="419.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="524.0" y="430.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/DefaultColumnDefinitions.size (3 samples, 0.06%)</title><rect x="521.4" y="419.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="524.4" y="430.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableList.size (3 samples, 0.06%)</title><rect x="521.4" y="403.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="524.4" y="414.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/metadata/DefaultMetadata.getTokenMap (3 samples, 0.06%)</title><rect x="522.4" y="435.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="525.4" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/metadata/token/DefaultTokenMap.getReplicas (25 samples, 0.49%)</title><rect x="523.1" y="435.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="526.1" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/metadata/token/DefaultTokenMap.getKeyspaceMap (13 samples, 0.25%)</title><rect x="523.1" y="419.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.1" y="430.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableMap.get (13 samples, 0.25%)</title><rect x="523.1" y="403.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="526.1" y="414.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableMap.get (13 samples, 0.25%)</title><rect x="523.1" y="387.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="526.1" y="398.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/api/core/CqlIdentifier.hashCode (2 samples, 0.04%)</title><rect x="523.5" y="371.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="526.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.04%)</title><rect x="523.5" y="355.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="526.5" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractMap.equals (5 samples, 0.10%)</title><rect x="524.0" y="371.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="527.0" y="382.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (3 samples, 0.06%)</title><rect x="524.4" y="355.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="527.4" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.06%)</title><rect x="524.4" y="339.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="527.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.04%)</title><rect x="524.7" y="323.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="527.7" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractMap.hashCode (4 samples, 0.08%)</title><rect x="525.1" y="371.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="528.1" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.hashCode (2 samples, 0.04%)</title><rect x="525.1" y="355.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="528.1" y="366.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (2 samples, 0.04%)</title><rect x="525.1" y="339.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="528.1" y="350.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (2 samples, 0.04%)</title><rect x="525.6" y="355.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="528.6" y="366.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.&lt;init&gt; (2 samples, 0.04%)</title><rect x="525.6" y="339.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="528.6" y="350.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/metadata/token/KeyspaceTokenMap.getReplicas (12 samples, 0.23%)</title><rect x="526.1" y="419.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="529.1" y="430.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/metadata/token/KeyspaceTokenMap.getReplicas (10 samples, 0.20%)</title><rect x="526.1" y="403.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="529.1" y="414.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableMap.get (4 samples, 0.08%)</title><rect x="526.1" y="387.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="529.1" y="398.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableMap.get (4 samples, 0.08%)</title><rect x="526.1" y="371.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="529.1" y="382.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/metadata/token/Murmur3Token.equals (3 samples, 0.06%)</title><rect x="526.3" y="355.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="529.3" y="366.0"></text>
</g>
<g>
<title>java/util/Collections.binarySearch (6 samples, 0.12%)</title><rect x="527.0" y="387.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="530.0" y="398.0"></text>
</g>
<g>
<title>java/util/Collections.indexedBinarySearch (6 samples, 0.12%)</title><rect x="527.0" y="371.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="530.0" y="382.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/metadata/token/Murmur3TokenFactory.hash (2 samples, 0.04%)</title><rect x="528.4" y="403.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="531.4" y="414.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/metadata/token/Murmur3TokenFactory.murmur (2 samples, 0.04%)</title><rect x="528.4" y="387.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="531.4" y="398.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/metadata/token/Murmur3TokenFactory.getblock (2 samples, 0.04%)</title><rect x="528.4" y="371.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="531.4" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title><rect x="528.4" y="355.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="531.4" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.04%)</title><rect x="528.4" y="339.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="531.4" y="350.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/session/DefaultSession.getKeyspace (4 samples, 0.08%)</title><rect x="528.8" y="435.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="531.8" y="446.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (4 samples, 0.08%)</title><rect x="528.8" y="419.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="531.8" y="430.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.08%)</title><rect x="528.8" y="403.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="531.8" y="414.0"></text>
</g>
<g>
<title>java/util/Optional.&lt;init&gt; (4 samples, 0.08%)</title><rect x="528.8" y="387.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="531.8" y="398.0"></text>
</g>
<g>
<title>java/util/Optional.get (3 samples, 0.06%)</title><rect x="529.8" y="435.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="532.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.04%)</title><rect x="530.9" y="451.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="533.9" y="462.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (7 samples, 0.14%)</title><rect x="531.4" y="515.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="534.4" y="526.0"></text>
</g>
<g>
<title>JVM_IHashCode (5 samples, 0.10%)</title><rect x="531.4" y="499.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="534.4" y="510.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (4 samples, 0.08%)</title><rect x="531.6" y="483.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="534.6" y="494.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (2 samples, 0.04%)</title><rect x="532.1" y="467.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="535.1" y="478.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (2 samples, 0.04%)</title><rect x="532.5" y="499.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="535.5" y="510.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.04%)</title><rect x="533.0" y="515.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="536.0" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.04%)</title><rect x="533.0" y="499.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="536.0" y="510.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.04%)</title><rect x="533.0" y="483.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="536.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.exceptionally (2 samples, 0.04%)</title><rect x="533.4" y="515.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="536.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniExceptionallyStage (2 samples, 0.04%)</title><rect x="533.4" y="499.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="536.4" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/concurrent/CompletableFutures.getUninterruptibly (194 samples, 3.79%)</title><rect x="534.4" y="547.0" width="44.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="537.4" y="558.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.get (194 samples, 3.79%)</title><rect x="534.4" y="531.0" width="44.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="537.4" y="542.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.waitingGet (193 samples, 3.77%)</title><rect x="534.6" y="515.0" width="44.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="537.6" y="526.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.managedBlock (70 samples, 1.37%)</title><rect x="549.4" y="499.0" width="16.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="552.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Signaller.block (65 samples, 1.27%)</title><rect x="550.5" y="483.0" width="15.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="553.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Signaller.isReleasable (2 samples, 0.04%)</title><rect x="550.5" y="467.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="553.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (63 samples, 1.23%)</title><rect x="551.0" y="467.0" width="14.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="554.0" y="478.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (63 samples, 1.23%)</title><rect x="551.0" y="451.0" width="14.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="554.0" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.201] (4 samples, 0.08%)</title><rect x="551.4" y="435.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="554.4" y="446.0"></text>
</g>
<g>
<title>Unsafe_Park (53 samples, 1.04%)</title><rect x="552.4" y="435.0" width="12.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="555.4" y="446.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.06%)</title><rect x="553.5" y="419.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="556.5" y="430.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.06%)</title><rect x="554.2" y="419.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="557.2" y="430.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (8 samples, 0.16%)</title><rect x="554.9" y="419.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="557.9" y="430.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.04%)</title><rect x="556.1" y="403.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="559.1" y="414.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (3 samples, 0.06%)</title><rect x="556.7" y="419.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="559.7" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.201] (2 samples, 0.04%)</title><rect x="557.4" y="419.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="560.4" y="430.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.10%)</title><rect x="557.9" y="419.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="560.9" y="430.0"></text>
</g>
<g>
<title>__pthread_cond_wait (16 samples, 0.31%)</title><rect x="559.1" y="419.0" width="3.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="562.1" y="430.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.06%)</title><rect x="562.7" y="419.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="565.7" y="430.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.04%)</title><rect x="563.4" y="419.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="566.4" y="430.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.04%)</title><rect x="564.8" y="435.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="567.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.nextSecondarySeed (59 samples, 1.15%)</title><rect x="565.5" y="499.0" width="13.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="568.5" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/session/RequestProcessorRegistry.processorFor (6 samples, 0.12%)</title><rect x="579.1" y="579.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="582.1" y="590.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/CqlRequestAsyncProcessor.canProcess (2 samples, 0.04%)</title><rect x="579.1" y="563.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="582.1" y="574.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.06%)</title><rect x="579.8" y="563.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="582.8" y="574.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/DefaultPreparedStatement.bind (559 samples, 10.93%)</title><rect x="580.5" y="611.0" width="129.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="583.5" y="622.0">com/datastax/oss..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/DefaultBoundStatement.&lt;init&gt; (2 samples, 0.04%)</title><rect x="580.5" y="595.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="583.5" y="606.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/data/ValuesHelper.encodePreparedValues (557 samples, 10.89%)</title><rect x="581.0" y="595.0" width="128.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.0" y="606.0">com/datastax/oss..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/DefaultColumnDefinitions.get (6 samples, 0.12%)</title><rect x="583.0" y="579.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="586.0" y="590.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/type/codec/StringCodec.encode (512 samples, 10.01%)</title><rect x="584.4" y="579.0" width="118.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="587.4" y="590.0">com/datastax/o..</text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/type/codec/StringCodec.encode (512 samples, 10.01%)</title><rect x="584.4" y="563.0" width="118.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="587.4" y="574.0">com/datastax/o..</text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocal.get (15 samples, 0.29%)</title><rect x="584.4" y="547.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="587.4" y="558.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.get (14 samples, 0.27%)</title><rect x="584.7" y="531.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="587.7" y="542.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.slowGet (8 samples, 0.16%)</title><rect x="586.0" y="515.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="589.0" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.16%)</title><rect x="586.0" y="499.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="589.0" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (3 samples, 0.06%)</title><rect x="587.0" y="483.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="590.0" y="494.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.wrap (2 samples, 0.04%)</title><rect x="587.9" y="547.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="590.9" y="558.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.wrap (2 samples, 0.04%)</title><rect x="587.9" y="531.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="590.9" y="542.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.encode (495 samples, 9.68%)</title><rect x="588.3" y="547.0" width="114.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="591.3" y="558.0">java/nio/chars..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (8 samples, 0.16%)</title><rect x="588.3" y="531.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="591.3" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.16%)</title><rect x="588.3" y="515.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="591.3" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="589.5" y="499.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="592.5" y="510.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.encode (487 samples, 9.52%)</title><rect x="590.2" y="531.0" width="112.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="593.2" y="542.0">java/nio/chars..</text>
</g>
<g>
<title>java/nio/charset/CoderResult.isOverflow (5 samples, 0.10%)</title><rect x="590.2" y="515.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="593.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeLoop (481 samples, 9.40%)</title><rect x="591.6" y="515.0" width="110.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="594.6" y="526.0">sun/nio/cs/UT..</text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeBufferLoop (480 samples, 9.38%)</title><rect x="591.8" y="499.0" width="110.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="594.8" y="510.0">sun/nio/cs/UT..</text>
</g>
<g>
<title>java/nio/Buffer.hasRemaining (91 samples, 1.78%)</title><rect x="633.3" y="483.0" width="21.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="636.3" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (74 samples, 1.45%)</title><rect x="654.3" y="483.0" width="17.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="657.3" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextPutIndex (67 samples, 1.31%)</title><rect x="654.3" y="467.0" width="15.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="657.3" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (7 samples, 0.14%)</title><rect x="669.8" y="467.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="672.8" y="478.0"></text>
</g>
<g>
<title>java/nio/StringCharBuffer.get (135 samples, 2.64%)</title><rect x="671.4" y="483.0" width="31.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="674.4" y="494.0">ja..</text>
</g>
<g>
<title>java/lang/String.charAt (89 samples, 1.74%)</title><rect x="674.9" y="467.0" width="20.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="677.9" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (31 samples, 0.61%)</title><rect x="695.4" y="467.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="698.4" y="478.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/type/codec/registry/CachingCodecRegistry.codecFor (29 samples, 0.57%)</title><rect x="702.8" y="579.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="705.8" y="590.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/type/codec/BlobCodec.accepts (2 samples, 0.04%)</title><rect x="705.8" y="563.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="708.8" y="574.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/type/codec/StringCodec.accepts (2 samples, 0.04%)</title><rect x="706.5" y="563.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="709.5" y="574.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/type/codec/UuidCodec.accepts (3 samples, 0.06%)</title><rect x="706.9" y="563.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.9" y="574.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/type/codec/UuidCodec.encode (4 samples, 0.08%)</title><rect x="707.6" y="563.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="710.6" y="574.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.06%)</title><rect x="708.8" y="563.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="711.8" y="574.0"></text>
</g>
<g>
<title>hammer/core$getInsertStatementBind.invoke (147 samples, 2.87%)</title><rect x="709.5" y="611.0" width="33.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="712.5" y="622.0">ha..</text>
</g>
<g>
<title>hammer/core$getInsertStatementBind.invokeStatic (147 samples, 2.87%)</title><rect x="709.5" y="595.0" width="33.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="712.5" y="606.0">ha..</text>
</g>
<g>
<title>com/datastax/oss/driver/api/querybuilder/QueryBuilder.insertInto (24 samples, 0.47%)</title><rect x="709.7" y="579.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.7" y="590.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/api/core/CqlIdentifier.fromCql (15 samples, 0.29%)</title><rect x="709.7" y="563.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="712.7" y="574.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/Strings.isDoubleQuoted (2 samples, 0.04%)</title><rect x="709.9" y="547.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="712.9" y="558.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/Strings.isQuoted (2 samples, 0.04%)</title><rect x="709.9" y="531.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="712.9" y="542.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/Strings.needsDoubleQuotes (6 samples, 0.12%)</title><rect x="710.4" y="547.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="713.4" y="558.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/Strings.isReservedCqlKeyword (4 samples, 0.08%)</title><rect x="710.6" y="531.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="713.6" y="542.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableSet.contains (3 samples, 0.06%)</title><rect x="710.6" y="515.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="713.6" y="526.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (6 samples, 0.12%)</title><rect x="711.8" y="547.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="714.8" y="558.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (6 samples, 0.12%)</title><rect x="711.8" y="531.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="714.8" y="542.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (4 samples, 0.08%)</title><rect x="712.2" y="515.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="715.2" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/api/querybuilder/QueryBuilder.insertInto (9 samples, 0.18%)</title><rect x="713.2" y="563.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="716.2" y="574.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/api/querybuilder/QueryBuilder.insertInto (9 samples, 0.18%)</title><rect x="713.2" y="547.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="716.2" y="558.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/querybuilder/insert/DefaultInsert.&lt;init&gt; (9 samples, 0.18%)</title><rect x="713.2" y="531.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="716.2" y="542.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/querybuilder/insert/DefaultInsert.&lt;init&gt; (9 samples, 0.18%)</title><rect x="713.2" y="515.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="716.2" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/base/Preconditions.checkPositionIndex (2 samples, 0.04%)</title><rect x="714.1" y="499.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="717.1" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="714.5" y="499.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="717.5" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/api/querybuilder/insert/OngoingValues.value (77 samples, 1.51%)</title><rect x="715.2" y="579.0" width="17.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="718.2" y="590.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/api/core/CqlIdentifier.fromCql (25 samples, 0.49%)</title><rect x="715.2" y="563.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="718.2" y="574.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/Strings.isDoubleQuoted (7 samples, 0.14%)</title><rect x="715.2" y="547.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="718.2" y="558.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/Strings.isQuoted (7 samples, 0.14%)</title><rect x="715.2" y="531.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="718.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.06%)</title><rect x="716.2" y="515.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="719.2" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/Strings.needsDoubleQuotes (13 samples, 0.25%)</title><rect x="716.8" y="547.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="719.8" y="558.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/Strings.isReservedCqlKeyword (12 samples, 0.23%)</title><rect x="717.1" y="531.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="720.1" y="542.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableSet.contains (10 samples, 0.20%)</title><rect x="717.1" y="515.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="720.1" y="526.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (2 samples, 0.04%)</title><rect x="719.4" y="515.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="722.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (5 samples, 0.10%)</title><rect x="719.8" y="547.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="722.8" y="558.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (5 samples, 0.10%)</title><rect x="719.8" y="531.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="722.8" y="542.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.06%)</title><rect x="719.8" y="515.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="722.8" y="526.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.06%)</title><rect x="719.8" y="499.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="722.8" y="510.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (2 samples, 0.04%)</title><rect x="720.1" y="483.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="723.1" y="494.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.04%)</title><rect x="720.5" y="515.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="723.5" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/querybuilder/insert/DefaultInsert.value (52 samples, 1.02%)</title><rect x="721.0" y="563.0" width="12.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="724.0" y="574.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/querybuilder/ImmutableCollections.append (43 samples, 0.84%)</title><rect x="721.0" y="547.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="724.0" y="558.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableMap$Builder.build (14 samples, 0.27%)</title><rect x="721.0" y="531.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="724.0" y="542.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableMap.fromEntryArray (14 samples, 0.27%)</title><rect x="721.0" y="515.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="724.0" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableMapEntry.createEntryArray (2 samples, 0.04%)</title><rect x="721.7" y="499.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="724.7" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableMap.checkNoConflictInKeyBucket (3 samples, 0.06%)</title><rect x="722.2" y="499.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="725.2" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/api/core/CqlIdentifier.equals (3 samples, 0.06%)</title><rect x="722.2" y="483.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="725.2" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableMap.makeImmutable (6 samples, 0.12%)</title><rect x="722.8" y="499.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="725.8" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableMapEntry.&lt;init&gt; (5 samples, 0.10%)</title><rect x="723.1" y="483.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="726.1" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableEntry.&lt;init&gt; (5 samples, 0.10%)</title><rect x="723.1" y="467.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="726.1" y="478.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableMap$Builder.put (14 samples, 0.27%)</title><rect x="724.2" y="531.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="727.2" y="542.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableMap$Builder.ensureCapacity (2 samples, 0.04%)</title><rect x="724.9" y="515.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="727.9" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableMap$Builder.put (9 samples, 0.18%)</title><rect x="725.4" y="515.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="728.4" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableMap$Builder.ensureCapacity (7 samples, 0.14%)</title><rect x="725.4" y="499.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="728.4" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.12%)</title><rect x="725.6" y="483.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="728.6" y="494.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.08%)</title><rect x="726.1" y="467.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="729.1" y="478.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableMap.entryOf (2 samples, 0.04%)</title><rect x="727.0" y="499.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="730.0" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractMap$SimpleImmutableEntry.&lt;init&gt; (2 samples, 0.04%)</title><rect x="727.0" y="483.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="730.0" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableMap.builder (3 samples, 0.06%)</title><rect x="727.5" y="531.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="730.5" y="542.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableMap$Builder.&lt;init&gt; (3 samples, 0.06%)</title><rect x="727.5" y="515.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="730.5" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableMap$Builder.&lt;init&gt; (3 samples, 0.06%)</title><rect x="727.5" y="499.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="730.5" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableMap.entrySet (8 samples, 0.16%)</title><rect x="728.2" y="531.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="731.2" y="542.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableMap.createEntrySet (6 samples, 0.12%)</title><rect x="728.2" y="515.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="731.2" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableMapEntrySet$RegularEntrySet.&lt;init&gt; (6 samples, 0.12%)</title><rect x="728.2" y="499.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="731.2" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableList.asImmutableList (3 samples, 0.06%)</title><rect x="728.2" y="483.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="731.2" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableList.asImmutableList (3 samples, 0.06%)</title><rect x="728.2" y="467.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="731.2" y="478.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableList.&lt;init&gt; (3 samples, 0.06%)</title><rect x="728.2" y="451.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="731.2" y="462.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableMapEntrySet$RegularEntrySet.&lt;init&gt; (3 samples, 0.06%)</title><rect x="728.8" y="483.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="731.8" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/SingletonImmutableBiMap.createEntrySet (2 samples, 0.04%)</title><rect x="729.5" y="515.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="732.5" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableMapEntrySet$RegularEntrySet.iterator (3 samples, 0.06%)</title><rect x="730.0" y="531.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="733.0" y="542.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableList.iterator (3 samples, 0.06%)</title><rect x="730.0" y="515.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="733.0" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableList.listIterator (3 samples, 0.06%)</title><rect x="730.0" y="499.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="733.0" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableList.listIterator (3 samples, 0.06%)</title><rect x="730.0" y="483.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="733.0" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/Iterators.forArray (3 samples, 0.06%)</title><rect x="730.0" y="467.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="733.0" y="478.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableMap.fromEntryArray (3 samples, 0.06%)</title><rect x="730.0" y="451.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="733.0" y="462.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/querybuilder/insert/DefaultInsert.&lt;init&gt; (9 samples, 0.18%)</title><rect x="730.9" y="547.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="733.9" y="558.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/base/Preconditions.checkArgument (2 samples, 0.04%)</title><rect x="732.1" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="735.1" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="732.5" y="531.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="735.5" y="542.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/DefaultSimpleStatement.setConsistencyLevel (2 samples, 0.04%)</title><rect x="733.0" y="579.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="736.0" y="590.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/DefaultSimpleStatement.setConsistencyLevel (2 samples, 0.04%)</title><rect x="733.0" y="563.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="736.0" y="574.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/DefaultSimpleStatement.&lt;init&gt; (2 samples, 0.04%)</title><rect x="733.0" y="547.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="736.0" y="558.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/querybuilder/insert/DefaultInsert.build (42 samples, 0.82%)</title><rect x="733.5" y="579.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="736.5" y="590.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/api/core/cql/SimpleStatementBuilder.build (6 samples, 0.12%)</title><rect x="733.5" y="563.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="736.5" y="574.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/cql/DefaultSimpleStatement.&lt;init&gt; (6 samples, 0.12%)</title><rect x="733.5" y="547.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="736.5" y="558.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/querybuilder/insert/DefaultInsert.builder (36 samples, 0.70%)</title><rect x="734.8" y="563.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="737.8" y="574.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/querybuilder/insert/DefaultInsert.asCql (36 samples, 0.70%)</title><rect x="734.8" y="547.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="737.8" y="558.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/querybuilder/CqlHelper.append (6 samples, 0.12%)</title><rect x="734.8" y="531.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="737.8" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.08%)</title><rect x="735.3" y="515.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="738.3" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.08%)</title><rect x="735.3" y="499.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="738.3" y="510.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.06%)</title><rect x="735.3" y="483.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="738.3" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/querybuilder/CqlHelper.appendIds (29 samples, 0.57%)</title><rect x="736.2" y="531.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="739.2" y="542.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/api/core/CqlIdentifier.asCql (7 samples, 0.14%)</title><rect x="736.7" y="515.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="739.7" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/Strings.needsDoubleQuotes (7 samples, 0.14%)</title><rect x="736.7" y="499.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="739.7" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/internal/core/util/Strings.isReservedCqlKeyword (6 samples, 0.12%)</title><rect x="736.7" y="483.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="739.7" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/RegularImmutableSet.contains (2 samples, 0.04%)</title><rect x="736.7" y="467.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="739.7" y="478.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (4 samples, 0.08%)</title><rect x="737.1" y="467.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="740.1" y="478.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (4 samples, 0.08%)</title><rect x="737.1" y="451.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="740.1" y="462.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="737.1" y="435.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="740.1" y="446.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.04%)</title><rect x="737.1" y="419.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="740.1" y="430.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.04%)</title><rect x="737.1" y="403.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="740.1" y="414.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.04%)</title><rect x="737.1" y="387.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="740.1" y="398.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.04%)</title><rect x="737.6" y="435.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="740.6" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/AbstractIndexedListIterator.next (2 samples, 0.04%)</title><rect x="738.3" y="515.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="741.3" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableList$1.get (2 samples, 0.04%)</title><rect x="738.3" y="499.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="741.3" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/IndexedImmutableSet.iterator (10 samples, 0.20%)</title><rect x="738.8" y="515.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="741.8" y="526.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/IndexedImmutableSet.iterator (10 samples, 0.20%)</title><rect x="738.8" y="499.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="741.8" y="510.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableList.iterator (7 samples, 0.14%)</title><rect x="738.8" y="483.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.8" y="494.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableList.listIterator (7 samples, 0.14%)</title><rect x="738.8" y="467.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="741.8" y="478.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableList.listIterator (7 samples, 0.14%)</title><rect x="738.8" y="451.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="741.8" y="462.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableList$1.&lt;init&gt; (6 samples, 0.12%)</title><rect x="739.0" y="435.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="742.0" y="446.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/AbstractIndexedListIterator.&lt;init&gt; (4 samples, 0.08%)</title><rect x="739.5" y="419.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="742.5" y="430.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/UnmodifiableListIterator.&lt;init&gt; (3 samples, 0.06%)</title><rect x="739.7" y="403.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="742.7" y="414.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/UnmodifiableIterator.&lt;init&gt; (3 samples, 0.06%)</title><rect x="739.7" y="387.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="742.7" y="398.0"></text>
</g>
<g>
<title>com/datastax/oss/driver/shaded/guava/common/collect/ImmutableSet.asList (3 samples, 0.06%)</title><rect x="740.4" y="483.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="743.4" y="494.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 0.16%)</title><rect x="741.1" y="515.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="744.1" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.16%)</title><rect x="741.1" y="499.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="744.1" y="510.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.16%)</title><rect x="741.1" y="483.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="744.1" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.08%)</title><rect x="742.0" y="467.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="745.0" y="478.0"></text>
</g>
<g>
<title>hammer/utils$rand_str2.invoke (1,582 samples, 30.93%)</title><rect x="743.6" y="643.0" width="365.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="746.6" y="654.0">hammer/utils$rand_str2.invoke</text>
</g>
<g>
<title>hammer/utils$rand_str2.invokeStatic (1,582 samples, 30.93%)</title><rect x="743.6" y="627.0" width="365.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="746.6" y="638.0">hammer/utils$rand_str2.invokeStatic</text>
</g>
<g>
<title>clojure/lang/RT.charCast (46 samples, 0.90%)</title><rect x="759.5" y="611.0" width="10.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="762.5" y="622.0"></text>
</g>
<g>
<title>clojure/lang/RT.longCast (7 samples, 0.14%)</title><rect x="770.4" y="611.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="773.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Double.intValue (399 samples, 7.80%)</title><rect x="772.0" y="611.0" width="92.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="775.0" y="622.0">java/lang/D..</text>
</g>
<g>
<title>java/lang/Double.valueOf (38 samples, 0.74%)</title><rect x="864.0" y="611.0" width="8.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="867.0" y="622.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (6 samples, 0.12%)</title><rect x="872.8" y="611.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="875.8" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (6 samples, 0.12%)</title><rect x="872.8" y="595.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="875.8" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.12%)</title><rect x="872.8" y="579.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="875.8" y="590.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.08%)</title><rect x="872.8" y="563.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="875.8" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (2 samples, 0.04%)</title><rect x="873.3" y="547.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="876.3" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.04%)</title><rect x="873.3" y="531.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="876.3" y="542.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.04%)</title><rect x="873.7" y="563.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="876.7" y="574.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (141 samples, 2.76%)</title><rect x="874.2" y="611.0" width="32.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="877.2" y="622.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (141 samples, 2.76%)</title><rect x="874.2" y="595.0" width="32.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="877.2" y="606.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (67 samples, 1.31%)</title><rect x="891.3" y="579.0" width="15.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="894.3" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.06%)</title><rect x="906.0" y="563.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="909.0" y="574.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (3 samples, 0.06%)</title><rect x="906.0" y="547.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="909.0" y="558.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (34 samples, 0.66%)</title><rect x="906.7" y="611.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="909.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (34 samples, 0.66%)</title><rect x="906.7" y="595.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="909.7" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.10%)</title><rect x="906.7" y="579.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="909.7" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.04%)</title><rect x="907.4" y="563.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="910.4" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (29 samples, 0.57%)</title><rect x="907.9" y="579.0" width="6.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="910.9" y="590.0"></text>
</g>
<g>
<title>java/util/Random.&lt;init&gt; (39 samples, 0.76%)</title><rect x="914.6" y="611.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="917.6" y="622.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.06%)</title><rect x="914.6" y="595.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="917.6" y="606.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.06%)</title><rect x="914.6" y="579.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="917.6" y="590.0"></text>
</g>
<g>
<title>java/util/Random.&lt;init&gt; (34 samples, 0.66%)</title><rect x="915.2" y="595.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="918.2" y="606.0"></text>
</g>
<g>
<title>java/util/Random.seedUniquifier (2 samples, 0.04%)</title><rect x="923.1" y="595.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="926.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.compareAndSet (2 samples, 0.04%)</title><rect x="923.1" y="579.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="926.1" y="590.0"></text>
</g>
<g>
<title>java/util/Random.nextFloat (802 samples, 15.68%)</title><rect x="923.5" y="611.0" width="185.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="926.5" y="622.0">java/util/Random.nextFloat</text>
</g>
<g>
<title>java/util/Random.next (802 samples, 15.68%)</title><rect x="923.5" y="595.0" width="185.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="926.5" y="606.0">java/util/Random.next</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.compareAndSet (2 samples, 0.04%)</title><rect x="1108.1" y="579.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1111.1" y="590.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (171 samples, 3.34%)</title><rect x="1108.6" y="643.0" width="39.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1111.6" y="654.0">jav..</text>
</g>
<g>
<title>java/lang/StringCoding.encode (171 samples, 3.34%)</title><rect x="1108.6" y="627.0" width="39.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1111.6" y="638.0">jav..</text>
</g>
<g>
<title>java/lang/StringCoding.encode (171 samples, 3.34%)</title><rect x="1108.6" y="611.0" width="39.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1111.6" y="622.0">jav..</text>
</g>
<g>
<title>java/lang/StringCoding$StringEncoder.encode (153 samples, 2.99%)</title><rect x="1108.6" y="595.0" width="35.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1111.6" y="606.0">jav..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.06%)</title><rect x="1119.9" y="579.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.9" y="590.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.06%)</title><rect x="1119.9" y="563.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.9" y="574.0"></text>
</g>
<g>
<title>java/lang/StringCoding.access$300 (7 samples, 0.14%)</title><rect x="1120.8" y="579.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1123.8" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.safeTrim (7 samples, 0.14%)</title><rect x="1120.8" y="563.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1123.8" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.12%)</title><rect x="1120.8" y="547.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1123.8" y="558.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (93 samples, 1.82%)</title><rect x="1122.4" y="579.0" width="21.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1125.4" y="590.0">s..</text>
</g>
<g>
<title>java/lang/StringCoding.deref (18 samples, 0.35%)</title><rect x="1143.9" y="595.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1146.9" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (18 samples, 0.35%)</title><rect x="1143.9" y="579.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1146.9" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (18 samples, 0.35%)</title><rect x="1143.9" y="563.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1146.9" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (18 samples, 0.35%)</title><rect x="1143.9" y="547.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1146.9" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (15 samples, 0.29%)</title><rect x="1144.6" y="531.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1147.6" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (14 samples, 0.27%)</title><rect x="1144.8" y="515.0" width="3.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1147.8" y="526.0"></text>
</g>
<g>
<title>java/util/UUID.randomUUID (54 samples, 1.06%)</title><rect x="1148.0" y="643.0" width="12.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1151.0" y="654.0"></text>
</g>
<g>
<title>java/security/SecureRandom.nextBytes (47 samples, 0.92%)</title><rect x="1148.9" y="627.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1151.9" y="638.0"></text>
</g>
<g>
<title>sun/security/provider/NativePRNG.engineNextBytes (47 samples, 0.92%)</title><rect x="1148.9" y="611.0" width="10.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1151.9" y="622.0"></text>
</g>
<g>
<title>sun/security/provider/NativePRNG$RandomIO.access$400 (47 samples, 0.92%)</title><rect x="1148.9" y="595.0" width="10.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1151.9" y="606.0"></text>
</g>
<g>
<title>sun/security/provider/NativePRNG$RandomIO.implNextBytes (46 samples, 0.90%)</title><rect x="1149.2" y="579.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1152.2" y="590.0"></text>
</g>
<g>
<title>sun/security/provider/NativePRNG$RandomIO.ensureBufferValid (3 samples, 0.06%)</title><rect x="1150.1" y="563.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1153.1" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="1150.3" y="547.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.3" y="558.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.04%)</title><rect x="1150.3" y="531.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1153.3" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/NativePRNG$RandomIO.getMixRandom (4 samples, 0.08%)</title><rect x="1150.8" y="563.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1153.8" y="574.0"></text>
</g>
<g>
<title>sun/security/provider/SecureRandom.engineNextBytes (35 samples, 0.68%)</title><rect x="1151.7" y="563.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1154.7" y="574.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (19 samples, 0.37%)</title><rect x="1153.6" y="547.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1156.6" y="558.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (19 samples, 0.37%)</title><rect x="1153.6" y="531.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1156.6" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (19 samples, 0.37%)</title><rect x="1153.6" y="515.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1156.6" y="526.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (19 samples, 0.37%)</title><rect x="1153.6" y="499.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1156.6" y="510.0"></text>
</g>
<g>
<title>sun/security/provider/SHA.implDigest (19 samples, 0.37%)</title><rect x="1153.6" y="483.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1156.6" y="494.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (2 samples, 0.04%)</title><rect x="1153.8" y="467.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1156.8" y="478.0"></text>
</g>
<g>
<title>sun/security/provider/SHA.implCompress (16 samples, 0.31%)</title><rect x="1154.2" y="467.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1157.2" y="478.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (2 samples, 0.04%)</title><rect x="1154.2" y="451.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1157.2" y="462.0"></text>
</g>
<g>
<title>sun/security/provider/SHA.implCompress0 (9 samples, 0.18%)</title><rect x="1154.7" y="451.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1157.7" y="462.0"></text>
</g>
<g>
<title>sun/security/provider/SHA.implCompressCheck (5 samples, 0.10%)</title><rect x="1156.8" y="451.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1159.8" y="462.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (5 samples, 0.10%)</title><rect x="1156.8" y="435.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1159.8" y="446.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (6 samples, 0.12%)</title><rect x="1157.9" y="547.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1160.9" y="558.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (3 samples, 0.06%)</title><rect x="1157.9" y="531.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1160.9" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (3 samples, 0.06%)</title><rect x="1157.9" y="515.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1160.9" y="526.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (3 samples, 0.06%)</title><rect x="1158.6" y="531.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1161.6" y="542.0"></text>
</g>
<g>
<title>sun/security/provider/SecureRandom.updateState (2 samples, 0.04%)</title><rect x="1159.3" y="547.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1162.3" y="558.0"></text>
</g>
<g>
<title>java/util/UUID.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1159.8" y="627.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1162.8" y="638.0"></text>
</g>
<g>
<title>clojure/lang/RT.baseLoader (2 samples, 0.04%)</title><rect x="1160.0" y="611.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1163.0" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (4 samples, 0.08%)</title><rect x="1160.7" y="739.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1163.7" y="750.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (4 samples, 0.08%)</title><rect x="1160.7" y="723.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1163.7" y="734.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$11/1330877166.run (4 samples, 0.08%)</title><rect x="1160.7" y="707.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1163.7" y="718.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (4 samples, 0.08%)</title><rect x="1160.7" y="691.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1163.7" y="702.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (4 samples, 0.08%)</title><rect x="1160.7" y="675.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1163.7" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (4 samples, 0.08%)</title><rect x="1160.7" y="659.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1163.7" y="670.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (4 samples, 0.08%)</title><rect x="1160.7" y="643.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1163.7" y="654.0"></text>
</g>
<g>
<title>java/rmi/NoSuchObjectException.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1160.9" y="627.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1163.9" y="638.0"></text>
</g>
<g>
<title>java/rmi/RemoteException.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1160.9" y="611.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1163.9" y="622.0"></text>
</g>
<g>
<title>java/io/IOException.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1160.9" y="595.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1163.9" y="606.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1160.9" y="579.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1163.9" y="590.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1160.9" y="563.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1163.9" y="574.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (2 samples, 0.04%)</title><rect x="1160.9" y="547.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1163.9" y="558.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (2 samples, 0.04%)</title><rect x="1160.9" y="531.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1163.9" y="542.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (2 samples, 0.04%)</title><rect x="1160.9" y="515.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1163.9" y="526.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (2 samples, 0.04%)</title><rect x="1160.9" y="499.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1163.9" y="510.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle) (2 samples, 0.04%)</title><rect x="1160.9" y="483.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.9" y="494.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle, Thread*) (2 samples, 0.04%)</title><rect x="1160.9" y="467.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.9" y="478.0"></text>
</g>
<g>
<title>start_thread (122 samples, 2.39%)</title><rect x="1161.9" y="787.0" width="28.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1164.9" y="798.0">st..</text>
</g>
<g>
<title>java_start(Thread*) (122 samples, 2.39%)</title><rect x="1161.9" y="771.0" width="28.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1164.9" y="782.0">ja..</text>
</g>
<g>
<title>ConcurrentG1RefineThread::run() (2 samples, 0.04%)</title><rect x="1161.9" y="755.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.9" y="766.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::run_young_rs_sampling() (2 samples, 0.04%)</title><rect x="1161.9" y="739.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.9" y="750.0"></text>
</g>
<g>
<title>GangWorker::loop() (103 samples, 2.01%)</title><rect x="1162.3" y="755.0" width="23.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.3" y="766.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (5 samples, 0.10%)</title><rect x="1162.3" y="739.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.3" y="750.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (20 samples, 0.39%)</title><rect x="1163.5" y="739.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.5" y="750.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (20 samples, 0.39%)</title><rect x="1163.5" y="723.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.5" y="734.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.06%)</title><rect x="1163.5" y="707.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.5" y="718.0"></text>
</g>
<g>
<title>SpinPause (17 samples, 0.33%)</title><rect x="1164.2" y="707.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1167.2" y="718.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.432] (77 samples, 1.51%)</title><rect x="1168.1" y="739.0" width="17.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.1" y="750.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (50 samples, 0.98%)</title><rect x="1168.1" y="723.0" width="11.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.1" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 0.12%)</title><rect x="1168.1" y="707.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.1" y="718.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.06%)</title><rect x="1168.1" y="691.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.1" y="702.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (2 samples, 0.04%)</title><rect x="1169.0" y="691.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1172.0" y="702.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 0.04%)</title><rect x="1169.5" y="707.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.5" y="718.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (11 samples, 0.22%)</title><rect x="1169.9" y="707.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.9" y="718.0"></text>
</g>
<g>
<title>SpinPause (31 samples, 0.61%)</title><rect x="1172.5" y="707.0" width="7.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1175.5" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (21 samples, 0.41%)</title><rect x="1179.8" y="723.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.8" y="734.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (7 samples, 0.14%)</title><rect x="1179.8" y="707.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.8" y="718.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (6 samples, 0.12%)</title><rect x="1180.1" y="691.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.1" y="702.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (4 samples, 0.08%)</title><rect x="1180.5" y="675.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.5" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.04%)</title><rect x="1181.7" y="707.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (2 samples, 0.04%)</title><rect x="1181.7" y="691.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="702.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (2 samples, 0.04%)</title><rect x="1181.7" y="675.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="686.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (10 samples, 0.20%)</title><rect x="1182.2" y="707.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.10%)</title><rect x="1184.7" y="723.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.7" y="734.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.10%)</title><rect x="1184.7" y="707.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.7" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.08%)</title><rect x="1184.7" y="691.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.7" y="702.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.08%)</title><rect x="1184.7" y="675.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.7" y="686.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer_helper(CardTableEntryClosure*, unsigned int, BufferNode*) (4 samples, 0.08%)</title><rect x="1184.7" y="659.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.7" y="670.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.08%)</title><rect x="1184.7" y="643.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.7" y="654.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) [clone .part.174] (4 samples, 0.08%)</title><rect x="1184.7" y="627.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.7" y="638.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.06%)</title><rect x="1184.9" y="611.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.9" y="622.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (2 samples, 0.04%)</title><rect x="1185.2" y="595.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.2" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (12 samples, 0.23%)</title><rect x="1186.1" y="755.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.1" y="766.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (12 samples, 0.23%)</title><rect x="1186.1" y="739.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.1" y="750.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (12 samples, 0.23%)</title><rect x="1186.1" y="723.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.1" y="734.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (10 samples, 0.20%)</title><rect x="1186.1" y="707.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.1" y="718.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (10 samples, 0.20%)</title><rect x="1186.1" y="691.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="702.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (6 samples, 0.12%)</title><rect x="1186.1" y="675.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.1" y="686.0"></text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.04%)</title><rect x="1186.1" y="659.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.1" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (3 samples, 0.06%)</title><rect x="1186.8" y="659.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.8" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.04%)</title><rect x="1186.8" y="643.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.8" y="654.0"></text>
</g>
<g>
<title>Compile::Optimize() (3 samples, 0.06%)</title><rect x="1187.5" y="675.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.5" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (2 samples, 0.04%)</title><rect x="1187.5" y="659.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.5" y="670.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.04%)</title><rect x="1188.4" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.4" y="718.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.04%)</title><rect x="1188.4" y="691.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.4" y="702.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.04%)</title><rect x="1188.4" y="675.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.4" y="686.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.04%)</title><rect x="1188.4" y="659.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.4" y="670.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.04%)</title><rect x="1188.4" y="643.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.4" y="654.0"></text>
</g>
<g>
<title>VMThread::run() (5 samples, 0.10%)</title><rect x="1188.8" y="755.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.8" y="766.0"></text>
</g>
<g>
<title>VMThread::loop() (5 samples, 0.10%)</title><rect x="1188.8" y="739.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.8" y="750.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (5 samples, 0.10%)</title><rect x="1188.8" y="723.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.8" y="734.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (5 samples, 0.10%)</title><rect x="1188.8" y="707.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.8" y="718.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (5 samples, 0.10%)</title><rect x="1188.8" y="691.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.8" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (5 samples, 0.10%)</title><rect x="1188.8" y="675.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.8" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (3 samples, 0.06%)</title><rect x="1188.8" y="659.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.8" y="670.0"></text>
</g>
</g>
</svg>
