datastax-java-driver {
  basic.config-reload-interval = 5 minutes
  basic.request {
    timeout = 2 seconds
    consistency = TWO
    page-size = 500
    serial-consistency = SERIAL
    default-idempotence = false
  }
  basic.load-balancing-policy {
    class = DefaultLoadBalancingPolicy
    slow-replica-avoidance = true
  }
  advanced.session-leak.threshold = 4
  advanced.connection {
    connect-timeout = 5 seconds
    init-query-timeout = 5 seconds
    set-keyspace-timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
    pool {
      local {
        size = 2
      }
      remote {
        size = 2
      }
    }
    max-requests-per-connection = 8192
    max-orphan-requests = 256
    warn-on-init-error = true
  }
  advanced.reconnect-on-init = true
  advanced.reconnection-policy {
    class = ExponentialReconnectionPolicy
    base-delay = 250 milliseconds
    max-delay = 10 seconds
  }
  advanced.retry-policy {
    class = DefaultRetryPolicy
  }
  advanced.speculative-execution-policy {
    class = ConstantSpeculativeExecutionPolicy
    max-executions = 3
    delay = 100 milliseconds
  }
  advanced.timestamp-generator {
    class = AtomicTimestampGenerator
    drift-warning {
      threshold = 1 second
      interval = 10 seconds
    }
    force-java-clock = false
  }
  advanced.resolve-contact-points = true
  advanced.protocol {
    version = V4
    compression = lz4
    max-frame-length = 256 MiB
  }
  advanced.request {
    warn-if-set-keyspace = true
    trace {
      attempts = 5
      interval = 3 milliseconds
      consistency = ONE
    }
    log-warnings = true
  }
  advanced.monitor-reporting {
    enabled = true
  }
  advanced.socket {
    tcp-no-delay = true
    keep-alive = true
    reuse-address = true
    linger-interval = 0
    receive-buffer-size = 131070
    send-buffer-size = 131070
  }
  advanced.heartbeat {
    interval = 1 seconds
    timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
  }
  advanced.metadata {
    topology-event-debouncer {
      window = 1 second
      max-events = 20
    }
    schema {
      enabled = true
      request-timeout = ${datastax-java-driver.basic.request.timeout}
      request-page-size = ${datastax-java-driver.basic.request.page-size}
      debouncer {
        window = 1 second
        max-events = 20
      }
    }
    token-map.enabled = true
  }
  advanced.control-connection {
    timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
    schema-agreement {
      interval = 200 milliseconds
      timeout = 10 seconds
      warn-on-failure = true
    }
  }
  advanced.prepared-statements {
    prepare-on-all-nodes = true
    reprepare-on-up {
      enabled = true
      check-system-table = false
      max-statements = 0
      max-parallelism = 512
      timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
    }
  }
  advanced.netty {
    daemon = true
    io-group {
      size = 3
      shutdown {quiet-period = 2, timeout = 15, unit = SECONDS}
    }
    admin-group {
      size = 2
      shutdown {quiet-period = 2, timeout = 15, unit = SECONDS}
    }
    timer {
      tick-duration = 100 milliseconds
      ticks-per-wheel = 2048
    }
  }
  advanced.coalescer {
    reschedule-interval = 10 microseconds
  }
}
